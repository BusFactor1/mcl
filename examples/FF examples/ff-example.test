;;-*- Mode: Lisp; Package: CCL -*-;;	Change History (most recent first):;;  2 4/1/96   akh  changes from bill;;  (do not edit before this line!!);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; FF-example.test;; Copyright Apple Computer, Inc. 1988-91;;;;;;  Examples the Macintosh Common Lisp Foreign Function Interface.;;;;  The forms in this file test the foreign code interface created by the;;  other two example files in this directory.;;;;  All the forms in this file should return non-nil.;;  Execute them one by one.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;;;; 04/12/96 bill  The call to add-flt returns.;;; -------------  MCL-PPC 3.9;;; 04/01/96 bill  comment out the call to add-flt on the PPC. Can't return floats yet.;;;(in-package :ccl);normal-calls(= (digit-value #\7) 7)(= (digit-value #\0) 0)(= (digit-value #\A) -1)(equal "azcd" (let ((s1 "abcd"))                (setchar s1 1 #\z)                s1))(equal "zbcd" (let ((s1 "abcd"))                (setchar s1 0 #\z)                s1));;The C code doesn't error on an out of range index.;;In the following call it just mungs memory. Beware.;;(let ((s1 "abcd")) (setchar s1 5 #\z) s1)(= (let ((f 1.0)) (flt-incr f 0.3) f) 1.3)(= (add-flt 1.2 3.4) (+ 1.2 3.4))(let ((c (cons (#_NewPtr 5) 10)))  (and (= 5 (#_GetPtrSize (car c)))       (progn         (grow-ptr c)         (= 10 (#_GetPtrSize (car c))))       (null (#_DisposePtr (car c)))));ff-call(= 7 (multiple-value-bind (entry a5) (ff-lookup-entry "digitval")       (ff-call entry :a5 a5 :long (char-code #\7) :d0)));defccallable(= (add-three 5 add-one) 8);ff-lookup-entry(setq foo (multiple-value-list (ff-lookup-entry "flt_incr")))(= (length foo) 2)(eq (type-of (car foo)) 'ccl::macptr)(eq (type-of (cadr foo)) 'ccl::macptr)(not (ff-lookup-entry "no-exist"))   