;;; Modern-inspectors.lisp;;;;;; Upgrades the MCL prosesses inspector to use the databrowser;;; (C) Terje Norderhaug, 2009-2010. LLGPL license.(eval-when (:load-toplevel :compile-toplevel :execute)  (require :databrowser))(in-package :inspector)(defvar process->id (make-hash-table :test 'eq :weak :key))(defvar process-id-counter 0)(defmethod inspector-process-id (p)   (without-interrupts    (or     (gethash p process->id)     (setf (gethash p process->id)           (incf process-id-counter)))))(defmethod inspector-process-name ((p ccl::process))  (process-name p))(defmethod inspector-process-whostate ((p ccl::process))  (process-whostate p))(defmethod inspector-process-priority ((p ccl::process))  (process-priority p))(defmethod inspector-process-idle ((p ccl::process))  ; see inspect-processes-print-function  (let ((idle-time (if (eq p *current-process*)                     0.0                     (/ (ccl::%tick-difference                         (ccl::get-tick-count)                         (process-last-run-time p))                        60.0)))        (idle-units "s"))    (when (>= idle-time 60)      (setq idle-time (/ idle-time 60)            idle-units "m")      (when (>= idle-time 60)        (setq idle-time (/ idle-time 60)              idle-units "h")        (when (>= idle-time 24)          (setq idle-time (/ idle-time 24)                idle-units "d"))))    (format nil "~,2f~a" idle-time idle-units)))(defmethod inspector-process-utilization ((p ccl::process))  (format nil "~5,1f%"          (* 100.0             (let ((ticks (- (#_tickcount) (process-creation-time p))))               (/ (process-total-run-time p)                  (if (eql ticks 0) 1 ticks))))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod inspector-view-class ((insp processes-inspector))  'modern-processes-inspector-view)(defmethod compute-line-count ((insp processes-inspector))  ;; hack to get the default height to fit the databrowser (used in set-initial-stuff)  (let* ((count (call-next-method))         (browser (or (inspector-view insp)                      (return-from compute-line-count 2)))         (w (view-window browser))         (official-line-height (font-line-height (view-font w)))         (real-line-height (when (dialog-item-handle browser)                            (rlet ((rowheightptr :unsigned-word))                              (#_getdatabrowsertableviewrowheight (dialog-item-handle browser) rowheightptr)                              (pref rowheightptr :unsigned-word)))))    (ceiling (* (1+ count) (/ real-line-height official-line-height)))))(advise ccl::inspect-processes        (let ((ccl::*window-default-size* (make-point 664 (point-v ccl::*window-default-size*))))          (:do-it))        :when :around :name inspect-processes-adjust-size)(defclass modern-processes-inspector-view (brw:collection-databrowser inspector-view)  ()  (:default-initargs   :selection-type :single   :columns   #((name       :property-type :text :justification :left :title "Name" :minwidth 190      :reader inspector-process-name)     (state       :property-type :text :justification :left :title "State" :minwidth 100      :reader inspector-process-whostate)     (priority       :property-type :text :justification :center :title "Priority" :maxwidth 120      :reader inspector-process-priority)     (idle       :property-type :text :justification :right :title "Idle"      :reader inspector-process-idle)     (utilization      :property-type :text :justification :left :title "Utilization"      :reader inspector-process-utilization)     )))(defmethod initialize-instance ((view modern-processes-inspector-view)  &rest rest &key view-position)  ;; hack to override the position set by initialize-instance on inspector-window!  (apply #'call-next-method view :view-position (add-points view-position #@(0 -3)) rest))(defmethod set-view-size ((view modern-processes-inspector-view) h &optional v)  ;; this is a hack... ensures that the view fills the window   ;; instead of allowing the SET-VIEW-SIZE on INSPECTOR::COMMAND-PANE to adjust for scroller!  (ccl::normalize-h&v h v)  (incf h 15)  (call-next-method view h v)  ; only works when  :hscrollp nil but that's a mess...  (brw::auto-size-columns view))(defmethod resample ((v modern-processes-inspector-view))  (call-next-method)  (let* ((i (inspector v))         (resample-function (inspector::resample-function i))         (browser v))    (when resample-function ;; ## should eliminate redundant calls...      (setf (inspector-object i)             (funcall resample-function i)))  ;; ## Need to be improved to only update the modified items!    (brw:databrowser-remove-all browser)    (brw:databrowser-add-items browser (cdr (inspector-object i)))))(defmethod brw:databrowser-item-selected ((view modern-processes-inspector-view) rowID)  (let* ((item (brw:databrowser-row-object view rowID))         (index (position item (inspector-object view)))         (single-click-inspect (and (not (shift-key-p)) (any-modifier-keys-p))))    (assert index)    (setf (selection view) index)    (if single-click-inspect (inspect-selection view))))(defmethod brw:databrowser-item-double-clicked ((view modern-processes-inspector-view) rowID)  (inspect-selection view))