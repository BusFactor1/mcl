;;;-*- Mode: Lisp; Package: CCL -*-;;;;;; MCL implementation of the Cocoa/Carbon Font Panel.;;; Changes the Font item of the Edit menu to use the Font Panel.;;;;;; March 2010, Terje Norderhaug <terje@in-progress.com>;;; License: LLGPL.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; NOTES;;;; http://www.carbondev.com/site/?page=Fonts+Window;; http://developer.apple.com/legacy/mac/library/documentation/Carbon/Reference/FontsWindow/Reference/reference.html;;;; l1-unicode-to-mac.lisp;; add to font-menus.lisp?;; sysutils.lisp   style-object class encapsulates an :atsustyle !;; see: %create-atsu-style, %set-style-object-font-face, set-style-object-font-codes.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(in-package :ccl)(defclass font-panel (windoid)  ((style-object :reader style-object    :documentation "Reflects the style settings in the font panel"    :type 'style-object    :initform (make-instance 'style-object)    :initarg :style)   (update-function :reader update-function :initform NIL :initarg :update-function)   (select-function :reader select-function :initform NIL :initarg :select-function))  (:documentation "Panel to select a font (pretends to be a regular window but is mostly handled by the system)"))(defparameter *font-panel* nil "Singleton representing the font panel")(defun font-panel ()  *font-panel*  #+ignore  (front-window :class 'font-panel))(defmethod initialize-instance ((w font-panel) &rest initargs &key (window-show t))  (declare (dynamic-extent initargs)(ignore initargs))  (call-next-method)  (assert (not *font-panel*))  (setf *font-panel* w)  ;; initializes the color to work around OS bug (without no color is set by font panel):  (%style-object-font-color (style-object w))  (let ((fun (update-function w)))    (when fun (funcall fun w)))  (set-font-panel-style (style-object w))  (when window-show    (window-show w)))(defun set-font-panel-style (style)  "Set the font panel to a style - the pane doesn't have to be visible"  (rlet ((&styles :ptr (style-ptr style)))    (ecase (#_SetFontInfoForSelection #$kFontSelectionATSUIType 1 &styles (%null-ptr))      (#.#$noerr NIL)      (#.#$fontPanelSelectionStyleErr       (warn " Bad font selection style info - Unsupported record version.")))))(defmethod window-show ((w font-panel))  (unless (#_FPIsFontPanelVisible)    (without-interrupts     (ecase (#_FPShowHideFontPanel)       (#.#$noerr NIL)       (#.#$fontPanelShowErr         (error "Can't display the Font Panel")))     (setf (slot-value w 'wptr) (#_FrontWindow)))    (set-window-object (wptr w) w)    ; without this, the null event handler won't be called right away!    (window-select w)))(defmethod window-hide ((w font-panel))  (when (#_FPIsFontPanelVisible)     (#_FPShowHideFontPanel)))(defmethod window-shown-p ((w font-panel))
   (#_FPIsFontPanelVisible))(defmethod font-panel-select-event-handler ((w font-panel))  (let ((fun (select-function w)))    (when fun      (funcall fun w))))(defmethod window-null-event-handler :around ((w font-panel))  (prog1    (call-next-method)                              (let ((fun (update-function w)))      (when fun        (when (funcall fun w)          (set-font-panel-style (style-object w)))))))(defmethod window-close-event-handler ((w font-panel))  (window-close w))(defmethod window-close ((w font-panel))  (when (#_FPIsFontPanelVisible)     (#_FPShowHideFontPanel))) (defpascal register-font-select-event-proc (:upp-creator #_NewEventHandlerUPP                                                         :EventHandlerCallRef handlerRef                                                          :EventRef event                                                         :ptr userData                                                         :OSStatus)  (declare (ignore handlerref userdata))  (let ((panel (font-panel)))    (assert panel)    (macrolet ((extract (inName inDesiredType atsutag type )                  `(rlet ((&value ,type))	            (when (eql #$noerr (#_GetEventParameter event ,inName ,inDesiredType (%null-ptr)                                         (record-field-length ,type) (%null-ptr) &value))                      (rlet ((tag :ATSUAttributeTag ,atsutag)
                             (size :ByteCount (record-field-length ,type))
                             (value :ATSUAttributeValuePtr &value))
                        (#_atsusetattributes (style-ptr (style-object panel)) 1 tag size value))                      T)))               (with-dictionary ((var event) &body body)                 `(let ((,var (rlet ((&dict :CFDictionaryRef))	                        (when (eql #$noerr (#_GetEventParameter ,event #$kEventParamDictionary #$typeCFDictionaryRef                                                     (%null-ptr) #.(record-field-length :CFDictionaryRef) (%null-ptr) &dict))                                  (pref &dict :CFDictionaryRef)))))                    (when ,var                      ,@body)))               (with-dictionary-value ((var dict key &optional (type :CFDataRef)) &body body)                 `(rlet ((&data ,type))                    (when (#_CFDictionaryGetValueIfPresent ,dict ,key &data)                       (let ((,var (pref &data ,type)))                        ,@body))))               (get-keys (dict)                 "get the keys in the dictionary for debug purposes"                 `(let ((count (#_CFDictionaryGetCount ,dict)))                    (assert count)                    (rlet ((&keys (:array :ptr count)))                      (#_CFDictionaryGetKeysAndValues ,dict &keys (%null-ptr))                      (loop                        for i below count                        collect (get-cfstr (%get-ptr &keys (* i #.(record-field-length :ptr)))))))))            (extract #$kEventParamATSUFontID #$typeATSUFontID #$kATSUFontTag :ATSUFontID)      (extract #$kEventParamATSUFontSize #$typeATSUSize #$kATSUSizeTag :fixed)      #+ignore ; crashes?      (extract #$kEventParamFontColor #$typeFontColor #$kATSUcolortag :rgbcolor)            (with-cfstrs ((kFontPanelVariationAxesKey "FontVariationAxes") ; guessing                    (kFontPanelVariationValuesKey "FontVariationValues") ; guessing                    (kFontPanelFeatureTypesKey "FontFeatureTypes") ; guessing                    (kFontPanelFeatureSelectorsKey "FontFeatureSelectors") ; guessing                     (kFontPanelAttributesKey "FontAttributes") ; ok                    (kFontPanelAttributeTagsKey "StyleAttributeTags") ; reverse engineered                    (kFontPanelAttributeSizesKey "StyleAttributeSizes") ; reverse engineered                    (kFontPanelAttributeValuesKey "StyleAttributeValues")) ; reverse engineered                (with-dictionary (dict event)          (with-dictionary-value (featureTypesData dict kFontPanelFeatureTypesKey)            (with-dictionary-value (featureSelectorData dict kFontPanelFeatureSelectorsKey)              (let ((count (/ (#_CFDataGetLength featureTypesData)                              #.(record-field-length :ATSUFontFeatureType)))                    (typePtr (#_CFDataGetBytePtr featureTypesData))                    (selectorPtr (#_CFDataGetBytePtr featureSelectorData)))                (errchk (#_ATSUSetFontFeatures (style-ptr (style-object panel)) count typePtr selectorPtr)))))                    (with-dictionary-value (axisData dict kFontPanelVariationAxesKey)            (with-dictionary-value (valueData dict kFontPanelVariationValuesKey)              (let ((count (/ (#_CFDataGetLength axisData)                              #.(record-field-length :ATSUFontVariationAxis)))                    (axisPtr (#_CFDataGetBytePtr axisData))                    (valuePtr (#_CFDataGetBytePtr valueData)))                (errchk (#_ATSUSetVariations (style-ptr (style-object panel)) count axisPtr valuePtr)))))                    ; SetFontAttributes:          (with-dictionary-value (attributesDict dict kFontPanelAttributesKey :CFDictionaryRef)            (with-dictionary-value (tagsData attributesDict kFontPanelAttributeTagsKey)                            (with-dictionary-value (sizesData attributesDict kFontPanelAttributeSizesKey)                             (with-dictionary-value (valuesData attributesDict kFontPanelAttributeValuesKey)                  ;; from fontpanel.lisp  C code in Interfaces:                  (let ((count (/ (#_CFDataGetLength tagsData)                                  #.(record-field-length :ATSUAttributeTag)))                        (byte2ptr (#_CFDataGetBytePtr valuesData)))                    (%stack-block ((valuesPtr (* count #.(record-field-length :ATSUAttributeValuePtr))))                      (rlet ((tagPtr (:ptr :ATSUAttributeTag) (#_CFDataGetBytePtr tagsData))                             (sizePtr (:ptr :ByteCount) (#_CFDataGetBytePtr sizesData)))                         (dotimes (i count)                                                    #+ignore                          (case (pref (pref tagPtr :ptr) :ATSUAttributeTag) ; handle is correct!                            (#.#$kATSUColorTag                             (let ((rgb (pref bytePtr :ATSURGBAlphaColor)))                               (setq *color-choice* (rgb-to-color rgb)))))                                                    (setf (%get-ptr valuesPtr (* i #.(record-field-length :ATSUAttributeValuePtr)))                                byte2Ptr)                          (let ((offset (%get-unsigned-long (pref sizePtr :ptr) (* i #.(record-field-length :ByteCount)))))                            (%incf-ptr byte2Ptr offset)))                                                (errchk (#_ATSUSetAttributes (style-ptr (style-object panel)) count (%get-ptr tagPtr) (%get-ptr sizePtr)                                 valuesPtr))))))))))))    (font-panel-select-event-handler panel)    #$noerr))(defpascal Font-Panel-Closed-Event-Handler (:upp-creator #_NewEventHandlerUPP                                                         :EventHandlerCallRef handlerRef                                                          :EventRef event                                                         :ptr userData                                                         :OSStatus)  (declare (ignore handlerRef event userData))  (let ((panel (font-panel)))    (when panel      (window-close-event-handler panel)))   #$noErr)(def-ccl-pointers install-font-panel-event-handlers ()  (rlet ((etype :EventTypeSpec                 :eventclass #$kEventClassFont                 :eventkind #$kEventFontSelection))    (#_InstallEventHandler (#_getapplicationEventTarget) register-font-select-event-proc 1 etype (%null-ptr) (%null-ptr)))  (rlet ((etype :EventTypeSpec                 :eventclass #$kEventClassFont                 :eventkind #$kEventFontPanelClosed))    (#_InstallEventHandler(#_getapplicationEventTarget) Font-Panel-Closed-Event-Handler 1 etype (%null-ptr) (%null-ptr))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass font-panel-menu-item (menu-item)  ()  (:default-initargs    :update-function (lambda (item &aux (panel (font-panel)))                       (set-menu-item-title item                        (if (and panel (window-shown-p panel))                          "Hide Fonts"                          "Show Fonts")))    :command-key #\T)  (:documentation "Toggle the font panel"))(defmethod menu-item-action ((item font-panel-menu-item))  (toggle-font-panel))(defun toggle-font-panel (&optional (panel (font-panel)))  (if (and panel (window-shown-p panel))    (window-hide panel)      (if panel        (window-show panel)        (make-instance 'font-panel                :select-function                (lambda (panel)                   (let ((style-object (style-object panel))                        (w (front-window)))                        (when w                          (let ((key-handler (or (current-key-handler w) w)))                            (ed-set-view-font key-handler                                                 (multiple-value-call #'font-spec (style-object-font-codes style-object)))                            #+ignore                            (multiple-value-call #'set-view-font-codes key-handler                                          (style-object-font-codes style-object))))))                :update-function                 (lambda (panel)                  (let* ((w (front-window))                         (key-handler (when w (or (current-key-handler w) w))))                    (when key-handler                      (multiple-value-bind (ff ms)                                           (ed-view-font-codes key-handler)                        (multiple-value-bind (ff2 ms2)                                             (style-object-font-codes (style-object panel))                          (unless (and (eql ff ff2) (eql ms ms2))                            (set-style-object-font-codes (style-object panel) ff ms)                            T))))))))))(defun new-add-font-menus ()  ; see add-font-menus  (apply 'remove-menu-items *font-menu* (menu-items *font-menu*))  (add-menu-items *font-menu* (make-instance 'font-panel-menu-item))   (add-menu-items *font-menu* (make-instance 'menu-item :menu-item-title "-"))   (let ((items (menu-items *font-style-menu*)))    #+ignore (apply #'remove-menu-items *font-style-menu* items)    (apply #'add-menu-items *font-menu* items))  (setf (attribute-reader *font-menu*)         (attribute-reader *font-style-menu*))  (remove-menu-items *edit-menu* *font-style-menu*))(let ((*WARN-IF-REDEFINE-KERNEL* nil)      (*warn-if-redefine* nil))(defun add-font-menus ()  ;; redefine existing function - hopefully it doesn't have any unexpected consequences...  (new-add-font-menus)))(defvar *add-font-menus* T)(when *add-font-menus*  (setf *add-font-menus* nil)  (new-add-font-menus)  ; ad-hoc patch to ensure menu-update of the font panel menu item,   ; consider fixing menu-update on font-menu instead:    (defclass font-font-menu (font-menu) ())  (defmethod menu-update :before ((self font-font-menu))    (menu-item-update (first (menu-items self))))  (change-class *font-menu* 'font-font-menu))#| need to call NSApplicationLoad() to avoid  problems?Cocoa in Carbon"It is now possible to show Cocoa windows in Carbon applications. When Cocoa is loaded into the Carbon application, NSApplicationLoad() should be called to initialize the Cocoa environment properly. Further documentation for this will be available on the Apple Developer Documentation site.Font panel and color panel are also available to Carbon applications using Carbon APIs. Cocoa will be loaded dynamically into a Carbon app when needed."(in-package :ccl)(add-framework-bundle "Cocoa.framework") (defloadvar %ns-applicationload  (lookup-function-in-bundle "NSApplicationLoad"     (get-bundle-for-framework-name "Cocoa.framework")))(defun %ns-applicationload ()  (ppc-ff-call %ns-applicationload :signed-fullword))(%ns-applicationload)|#