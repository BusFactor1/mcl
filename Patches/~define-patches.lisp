;;;-*-Mode: LISP; Package: CCL -*-;;;;;; ~define-patches.lisp;;;;;; Facilitates patching optional MCL modules;;;;;; Copyright ©2009 Terje Norderhaug <terje@in-progress.com>. License: LLGPL.;;;;;; This software is made available AS IS, and no warranty is made about the software or its performance. ;;;;;; Note: filename prefixed so load-patches loads it first (as it does reverse alphabetical order).(in-package :ccl)(define-condition defer-patch ())(defvar *deferred-patches* NIL)(defun defer-patch (pathname &key module)  "Postpone the loading of the patch until the module has loaded"  (when (eq pathname T)    (setf pathname(or *load-pathname* *loading-file-source-file*)))  (unless (module-loaded-p module)    (push (list pathname :module module) *deferred-patches*)    (signal 'defer-patch)))(defun load-ready-patches ()  "Load all deferred patches for which module have been loaded"  (loop     for patch = (rassoc-if #'module-loaded-p *deferred-patches* :key (lambda (keys)(getf keys :module)))    while patch    collect patch    do (setf *deferred-patches* (remove patch *deferred-patches*))    do (let ((*load-verbose* t)
             ;(*record-source-file* nil)
             (*warn-if-redefine* nil) ; - & various  other load vars
             (*warn-if-redefine-kernel* nil))         (load (car patch)))))(advise load        (handler-case          (:do-it)          (defer-patch ()            NIL)          (:no-error (v)           (load-ready-patches)           v))        :when :around :name 'load-deferring-patches)  