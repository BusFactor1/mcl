;;	Change History (most recent first):;;  1 2/13/97  alice hartley ;;  (do not edit before this line!!)This file contains release notes for version 0.93 of Wood.New features since 0.91-----------------------This release gives you control over Wood's I/O bufferring, and includessome performance enhancements and bug fixes. I have tested it inMCL 2.0.1 and MCL 3.0. The distributed fasl files were compiled withMCL 3.0.You've always been able to control the page size, but Wood used touse MCL's default I/O block size to do its low-level disk I/O. InMCL 2.x that was 512 bytes. In 3.0 it's 2K bytes. In this release,the I/O block size is the same as the page size. If your data hasgood enough locality, I/O tends to be fastest with a page size ofabout 4K bytes. Locality greatly affects this, however, so the onlyway to tell which page size is best for your application is to trya bunch of different ones and time them. Remember, a Wood databasefile remembers its page size, so to try another page size you needto create a new file with the new page size. GC-PHEAP-FILE'snew PAGE-SIZE argument allows you to change the page size whenyou garbage collect a wood database.You now have better control over the swapping buffers used byWood's software virtual memory. You no longer need to specify thenumber of pages of swapping space. Instead, OPEN-PHEAP now has aSWAPPING-SPACE parameter that allows specification as bytes. Woodused to allocate swapping space for each file. If your applicationopens a number of Wood files, you may benefit from the newshared swapping space feature, available via the MAKE-SHARED-BUFFER-POOLfunction and the SHARED-BUFFER-POOL parameter to OPEN-PHEAP. Itmay speed up your application while using less total memory. Readthe "wood.doc" sections on OPEN-PHEAP and MAKE-SHARED-BUFFER-POOLfor details.Wood's low-level page table used to be a Common Lisp hash table.It is now a custom hash table that is much faster than the generalpurpose ones. Since all Wood data accesses go through the pagetable, this provides a noticeable speedup.P-ASSOC is just like Common Lisp's assoc, but it will operate ona disk-resident a-list.P-DO-BTREE is a macro that simplifies some uses of p-map-btree.P-MAP-BTREE-KEYSTRINGS allows you to map over just the keys ina btree. Faster than P-MAP-BTREE if you don't care about the values,since P-MAP-BTREE needs to intern a PPTR for each non-immediate value.Fix a fencepost in the new btree code that was uploaded with Wood0.9. Basically, btrees were unuseable in databases larger than 16megabytes. Now they work.Instead of signalling a "Wrong FASL version." error, Wood now deletesthe old fasl file and recompiles.Mod Histories-------------block-io-mcl.lisp;; 07/21/95 bill inhibited-event-dispatch now processes *inhibited-foreground-switch*;; 05/31/95 bill wood:with-database-locked now calls new inhibted-event-dispatch;;               function if event processing happenned while it was inhibited.;;               This makes interactive response time as good as it can be;;               given this locking mechanism.;; 05/25/95 bill %fread-bytes & %fwrite-bytes use #_BlockMove instead;;               of a move.b loop; it's faster.;;               set-minimum-file-length never makes the file shorter.disk-cache-accessors.lisp;; 05/25/95 bill more da -> da.l changes.disk-cache.lisp;; 05/31/95 bill Shared swapping space:;;               Move the page-size, max-pages, pages & locked-pages slots from the;;               disk-cache structure to the new shared-buffer structure. disk-cache;;               gets a new shared-buffer slot to hold a shared-buffer instance.;;               cons-disk-page works with a NIL disk-cache arg.;;               print-disk-page works if disk-page-stream is NIL.;;               New shared-buffer-pool structure.;;               New get-shared-buffer function, gets or allocates a shared-buffer of;;               a particular page size from a shared-buffer-pool instance.;;               open-disk-cache takes new shared-buffer & shared-buffer-pool keyword;;               args. If shared-buffer-pool is specified, uses get-shared-buffer;;               to get a shared-buffer. Otherwise, if shared-buffer is specified, uses;;               it. Otherwise, conses up a new shared-buffer with the given page-size;;               & swapping-space.;;               close-disk-cache call remove-disk-cache-from-shared-buffer, a new function;;               that removes all references to a disk-cache from the disk-page's in a shared-buffer.;;               add-disk-pages adds the new pages to the disk-cache-shared-buffer.;;               read-disk-page takes a new disk-cache argument and uses it to initialize the;;               disk-page-disk-cache & disk-page-stream slots.;;               flush-disk-page works if disk-page-disk-cache is NIL.;;               get-disk-page, lock-page, unlock-page updated for using the disk-cache-shared-buffer.;;               extend-disk-cache no longer calls add-disk-pages. It lets get-disk-page do so.;; 05/25/95 Moon New constant: $disk-page-flags_touched-bit, set when a page is;;               referenced.;;               New functions, disk-page-touched? & (setf disk-page-touched?), to access;;               the $disk-page-flags_touched-bit.;;               get-disk-page now uses a 1-bit clock algorithm instead of;;               least-recently-swapped to determine which page to swap out.;; 05/25/95 bill *default-page-size* moves here from "persistent-heap.lisp".;;               New parameter, *default-swapping-space*, is the default number;;               of bytes to use for swapping space.;;               New parameter, *big-io-buffers*, true if cl:open takes an;;               :elements-per-buffer keyword arg.;;               open-disk-cache defaults its page-size arg to;;               *default-page-size* instead of 512. It errors if the page size;;               is not at least 512. Doesn't pass an :external-format keyword;;               arg to open unless one was passed in. If *big-io-buffers* is;;               true, passes the page-size as the :elements-per-buffer keyword;;               arg to open.;;               extend-disk-cache takes a new, optional, extend-file? arg. If;;               true, calls set-minimum-file-length to extend the length of the file.btrees.lisp;;; 08/10/95 bill  p-do-btree macro is to a btree what dolist is to a list.;;; 07/02/95 bill  Fix fencepost in computation of fill-count in %shift-node-left;;;                Thanks to Horace Enea for providing the test case to track down this bug.;;; 05/25/95 bill  New parameter: *max-btree-node-size*.;;;                dc-cons-btree-node calls dc-allocate-new-btree-node instead of;;;                %dc-allocate-new-memory.;;;                New function: dc-allocate-new-btree-node, calls %dc-allocate-new-memory;;;                as before if the page size is <= *max-btree-node-size*. Otherwise, carves;;;                up a disk page into *max-btree-node-size* nodes, returns one of them, and;;;                adds the rest to the btree node free list.;;; 04/11/95 bill  new function: p-map-btree-keystrings.;;;                dc-map-btree uses compare-strings-function instead of string<;;;                for comparing with the TO arg.disk-page-hash.lisp;; 05/31/95 bill New fileload-wood.lisp;; 08/11/95 bill  translate this file's pathname to a physical one when;;                defining the "wood" logical pathname to prevent;;                a recursive definition.;; 08/11/95 bill  compile-and-load deletes fasl files for other MCL versions.;; 08/11/95 bill  load-wood loads big-io-buffer-patch if necessary;; 08/10/95 bill  export p-assoc & p-do-btree;; 05/31/95 bill  export make-shared-buffer, make-shared-buffer-pool;; 05/25/95 bill  add disk-page-hash to *wood-files*persistent-heap.lisp;; 08/10/95 bill  p-assoc;; 06/30/95 bill  p-load-header passes a null depth directly to p-load-gvector.;;                Thanks to Sidney Markowitz.;; 05/31/95 bill  Shared swapping space:;;                Add :shared-buffer & :shared-buffer-pool to *open-pheap-keywords*;;                open-pheap takes new :shared-buffer & :shared-buffer-pool keywords;;                which it passes on to open-disk-cache.;; 05/31/95 bill  pheap class definition now specifies the size of the pheap->mem-hash &;;                mem->pheap-hash tables as *pheap<->mem-hash-table-size* = 500.;; 05/25/95 bill  *default-page-size* moved to disk-cache.lisp.;;                remove *default-max-pages*.;;                add :swapping-space to *open-pheap-keywords*;;                open-pheap takes a new :swapping-space keyword arg, the default is;;                *default-swapping-space*. The default value for max-pages is now computed from;;                the page-size and the swapping-space, and is forced to be at least 2.;;                dc-cons-segment calls %dc-allocate-new-memory with a nil value for its;;                initial-element arg. This prevents storage from being initialized twice,;;                once when the segment is allocated and again when an object is consed.;;                initialize-vector-storage calls extend-disk-cache with a true value for;;                its new extend-file? arg if the vector being consed is at least 16K bytes;;                long. This is an attempt to get contiguous disk space for large arrays.;; 03/22/95 bill  in %p-store-internal - in the first (conser) body subform of the %p-store-object-body;;                form, unconditionally set checked-load-function? to true. This prevents unnecessary;;                checking in the second (filler) body subform.split-lfun.lisp;; 06/30/95 bill  split-lfun now works in MCL 3.0.wood-gc.lisp;; 05/25/95 bill gc-pheap-file-internal takes a new :page-size arg, which is used;;               as the page-size for the new, compacted, pheap. It returns true;;               if the new page size is different than the old one.;;               gc-pheap-file's args, except the first one, are now keywords instead;;               of optional. This is an incompatible change.;;               It takes a new :page-size arg which is passes on to gc-pheap-file-internal.;;               The new file replaces the old if either the page size changed or it is smaller.wood.lisp;; 08/11/95 bill  Handle wrong fasl version errorspatches;big-io-buffer-patch.lisp;; 08/11/95 bill  New file. Patches MCL 2.x to support MCL 3.0's;;                :elements-per-buffer arg to OPEN.