# 01/19/01 akh lose many libs, sanesyshandler, vmfix for carbon version# 02/18/00 akh add navigationLib to kernellibs# 03/01/97  gb   make KERNEL_CFRG_NAME a parameter, pass it to compiler when making pef.o# 02/05/97 bill  Add "-packdata off" to PPCLink for SaneSysHandler#                as directed by Gary's email.# 02/01/97  gb   build SaneSysHandler with PPCLink/Rez# 01/29/97  gb   GCC, motorola c support.# ----- 4.0# 10/04/96 slh   Gary's change to generate kernel link map# 07/30/96  gb   use pmcl-kernel.rsrc so rez does less work per build.# 07/20/96  gb   generate traceback tables; don't reference libloadint (never worked.)# 06/10/96  gb   new kernel version, fragment name.  Make SaneSysHandler; don't link in ProcessMgrSupport#                sp_builtin# 05/12/96  gb   loader.[cho]; new kernel_current_version, kernel_implementation_version.  pef.o dependency.#----- 3.9# 04/15/96  gb   vmfix.*#----- 3.9f1c2# 04/09/96  gb   kernel_version stuff; pass SystemSevenOrLater to rez.# 03/26/96  gb   using MW C makes GC about 35% faster (even with -opt off), so it's the default# 02/10/96  gb   add sp_end.o, update-subprims, libloadinit targets.# 01/10/96  gb   "newversion" target bumps siow_resources' release number.# 01/06/96  gb   add pef.o; try Motorola C (it sucks.)#                makepef does weak import thing.# 12/27/95  gb   pass c_defines (e.g., -d SIOW) to rez.# 12/22/95  gb   make .xSYM (vice .xcoff) symbols for pmcl-kernel.#                -enum int for MrC as well.# 12/13/95  gb   changes for metrowerks# 11/18/95  gb   no SIOW for now# 11/17/95 slh   subprims link depends on subprims.exp# 11/08/95  gb   more resources; 68K stub.kernel_current_version = 	"0x04009000"kernel_implementation_version =	"0x04009000"# backward-compatible to:kernel_definition_version = 	"0x04009000"kernel_cfrg_name = "pmcl-kernel4.4"#---------# 'spjump.o' has to come first. 'sp_end.o' has to come last.#  Further ordering may become significant  in the future.SUBPOBJECTS = spjump.o subprims.o sp_call.o sp_lambda.o sp_bind.o ¶	sp_catch.o sp_ffi.o sp_heap_cons.o sp_stack_cons.o sp_values.o ¶	sp_vref.o sp_builtin.o notrap.o sp_end.o#COBJECTS = pmcl-kernel.o gc.o bits.o kernel-init.o lisp-exceptions.o mathtrap.o loader.o pef.o debugf.o qt.oCOBJECTS = kernel-init.o#KERNELOBJECTS = imports.o {COBJECTS} asmutils.o qtppc.oKERNELOBJECTS = {COBJECTS} runtime.oSIOW_CRT0 = {PPCLibraries}PPCSiow.oREGULAR_CRT0 = {PPCLibraries}StdCRuntime.oKERNEL_CRT0 = {REGULAR_CRT0}#KERNEL_CRT0 = {SIOW_CRT0}# have a TTY to read from/write to; in fact, it's SIOW#c_defines = -d SIOW -d TTY# have a TTY to read from/write to; it's the "console" packagec_defines = -d CARBON -d TARGET_API_MAC_CARBON=1KERNELLIBS = {SharedLibraries}CarbonLib ¶	     {SharedLibraries}StdCLib SUBPHEADERS = constants.s macros.s uuo.s errors.s lisp.sCHEADERS = # There are (currently) two compiler/linker pairs that can be used:# the Apple/Lucid/Symantec compiler (MrC) and the Apple Linker (ppclink), and# the Metrowerks MPW PPC C compiler (mwcppc) and the Metrowerks MPW PPC linker (mwlinkppc).# CC is the shell variable used to name the C compiler; # c_options contains platform-specific C compiler options;# LD is the shell variable used to name the linker used to build the kernel;# ldflags contains platform-specific linker options.# Note that "subprims" must currently be linked with ppclink, since mwlinkppc#  discards symbolic debugging information from imported XCOFF .o files.  Nice#  of it ...appleCC = MrCgnuC = gCmwCC = mwcppcmotoCC = mccappleLD = ppclinkmwLD = mwlinkppcappleCCoptimize = -opt offgnuCCoptimize = -O2mwCCoptimize = -opt off	     # MWC -can-, but it's a little harder to debug.  Maybe on later.motoCCoptimize = 	     # Defaults to "local optimization only" when symbols enabled.appleCCsymopt = -sym on -tracebackmwCCsymopt = -sym onmotoCCsymopt = -ggnuCCsymopt = -gappleLDflags = -fragname {kernel_cfrg_name} -vercur {kernel_current_version} -verimp {kernel_implementation_version}  ¶	-verdef {kernel_definition_version} ¶	-dead off ¶	-o {targ} -map {targ}.map# make .xSYM file creator = Power Mac Debugger instead of MW DebugmwLDflags = -o {targ} -csym R2Db -cv {kernel_current_version} -dv {kernel_definition_version} ¶   -uv {kernel_implementation_version}  -name {kernel_cfrg_name} -map {targ}.mapapplepostLD = #makepef {kernel_entrypoints} -ft shlb -o {targ} ¶	 #{targ}.xcoff -c {kernel_current_version} -d {kernel_definition_version} ¶	 #-u {kernel_implementation_version} ¶	##makesym -w -sym on,3.2 {targ}.xcoff ; ¶	#delete {targ}.xcoffmwpostLD =		# nothingappleCCoptions = -enum int -w 2  -traceback # shut up with the "possibly                                     # unintended assignment warnings", alreadygnuCCoptions = -Dpascal= -fno-builtin -cmwCCoptions = -enum int -d SUPPORT_PRAGMA_UNUSED -traceback                        # Note that "-proto strict" in MWC requires that a function has to                        # be prototyped before it's -defined-; without this nonsense, it's                        # able to infer a function's prototype from its definition.  The                        # value of "proto strict" is, I admit, lost on me.                        # MrC doesn't understand #pragma unused(var,...), but then again                        # it doesn't recognize unused variables either.motoCCoptions = -Apascalstr=1 -O -d SUPPORT_PRAGMA_UNUSED# uncomment one or the other set of assignments.  There might be a less# cumbersome way of doing this, but I don't know what it is.# You should do a "make cleanc" whenever changing this.# if APPLE_LINKER# if APPLE_CCC = {appleCC}c_options = {appleCCoptions}c_optimize = {appleCCoptimize}c_symopt = {appleCCsymopt}# else if GNU_C#CC = {gnuC}#c_options = {gnuCCoptions}#c_optimize = {gnuCCoptimize}#c_symopt = {gnuCCsymopt}# else motorola_c#CC = {motoCC}#c_options = {motoCCoptions}#c_optimize = {motoCCoptimize}#c_symopt = {motoCCsymopt}# endifLD = {appleLD}ldflags = {appleLDflags}postld = {applepostLD}# else (METROWERKS)#CC = {mwCC}#c_options = {mwCCoptions}#c_optimize = {mwCCoptimize}#c_symopt = {mwCCsymopt}#LD = {mwLD}#ldflags = {mwLDflags}#postld = {mwpostLD}# endifkernel_entrypoints = -init lib_initialize -term lib_terminatecflags = -i {CIncludes} {c_symopt} {c_optimize} {c_defines} {c_options}# it'd be nice to "weakly" import InstallExceptionFilter, so we can complain # about its absence in a somewhat-meaningful way.# ppclink's '-weak' option doesn't seem to work# We don't really depend on "siow_resources" - whatever that was - but# the MPW "buildprogram' script is functionally challengedpmcl-kernel Ä {KERNELOBJECTS} pmcl-kernel.proj.exp siow_resources  {ld} 	-w -sym on -xm s {kernel_entrypoints} -@export pmcl-kernel.proj.exp -weaklib StdCLib¶        -t shlb {KERNEL_CRT0} {KERNELOBJECTS} {KERNELLIBS} {ldflags}  {postLD}install Ä pmcl-kernel  duplicate -y pmcl-kernel ::  # pmcl-kernel.rsrc Ä subprims.r subprims SaneSysHandler vmfix.rsrc pmcl-kernel.r#  rez -d KERNEL_CFRG_NAME={kernel_cfrg_name} -o {targ} pmcl-kernel.r#  rez -a -o {targ} subprims.r#  echo "Include ¶"SaneSysHandler¶" ¶;" | rez -a -o {targ}pmcl-kernel.rsrc Ä pmcl-kernel.r  rez -d KERNEL_CFRG_NAME={kernel_cfrg_name} -o {targ} pmcl-kernel.r#  echo "Include ¶"SaneSysHandler¶" ¶;" | rez -a -o {targ} siow_resources Ä siow_resources.r pmcl.r   rez -d SystemSevenOrLater=1 -t RSRC -c RSED  -o siow_resources {c_defines} -d APPNAME="pmcl-application" siow_resources.r pmcl.r#vmfix.rsrc Ä vmfix.o#  link -o vmfix.rsrc vmfix.o -rt VMFX=1 -ra vmfix=locked# SaneSysHandler Ä SaneSysHandler.pef SaneSysHandler.r#  rez -a -o {targ} SaneSysHandler.r# SaneSysHandler.pef Ä SaneSysHandler.o asmutils.o#   PPCLink -w -main SSXHmain -o {targ} -share global -packdata off SaneSysHandler.o asmutils.o ¶# 	{SharedLibraries}InterfaceLib# increment the "non-release" level of the vers(1) resource in siow_resources,# and update the rez source file to reflect the new version as well.newversion Ä  setversion -d -t vers -i 1 -rezsource pmcl.r -x siow_resources# update-subprims Ä update-subprims.o#   ppclink -o update-subprims.xcoff -outputformat xcoff  -sym on {PPCLibraries}StdCRuntime.o ¶# 	{PPCLibraries}PPCCRuntime.o update-subprims.o {SharedLibraries}StdCLib ¶# 	{SharedLibraries}InterfaceLib {SharedLibraries}MathLib #   makepef -o update-subprims update-subprims.xcoff -ft MPST -fc 'MPS '#   mergefragment -c update-subprims -a#   makesym -sym on,3.2 -o update-subprims.xSYM update-subprims.xcoff#   delete update-subprims.xcoff#NotPPC ÄÄ NotPPC.r#  Rez NotPPC.r -append -d SystemSevenOrLater=1 -o NotPPC#NotPPC ÄÄ NotPPC.o#  Link -t RSRC -c '????' -sg PPCOnly=Main,%A5Init ¶#	NotPPC.o ¶#	"{Libraries}"MacRuntime.o ¶#	"{Libraries}"Interface.o ¶#	-o NotPPC#NotPPC.o Ä NotPPC.c#  sc -r NotPPC.c -o NotPPC.o# We want debugging information to be in xSYM format, which requires jumping# through a few hoops.# The first hoop creates a library in XCOFF format, with symbolic information# turned on.# The second hoop creates a PEF version of the XCOFF library.# The next hoop derives an MPW 3.2-compatible xSYM file from the XCOFF library.# Finally, we can delete the XCOFF library, which is no less annoying now than# when it was created.#subprims Ä {SUBPOBJECTS} subprims.exp#  ppclink -dead off -@export subprims.exp -sym on -xm SharedLibrary ¶#  	-outputformat xcoff -o subprims.xcoff {SUBPOBJECTS}#  makesym -sym on,3.2 subprims.xcoff#  makepef -ft shlb -fc cfrg -o subprims subprims.xcoff # delete subprims.xcoffclean Ä  delete -i {KERNELOBJECTS} {SUBPOBJECTS}  pmcl-kernel siow_resources pmcl-kernel.rsrc sanesyshandler.o sanesyshandler.pef# just clean up .c objects.  Clean up the kernel symbol files as well,# since one of them may have been created by another compiler/linker pair.cleanc Ä  delete -i {COBJECTS} console.o pmcl-kernel.xcoff pmcl-kernel.xSYMcclean Ä cleanc.o Ä .s  ppcasm -sym on -i {AIncludes} {depdir}{default}.s  -o {targdir}{default}.o.o Ä .c  {CC} {cflags} {depdir}{default}.c  -o {targdir}{default}.o.o Ä .a  asm  {depdir}{default}.a  -o {targdir}{default}.o{SUBPOBJECTS} Ä {SUBPHEADERS}{COBJECTS} Ä {CHEADERS}console.o Ä console.h mpwIO.h# I'm not sure if all of the deltas (shell quotes) around# the reference to kernel_cfrg_name are necessary for all# C preprocessors.  They do all seem to be necessary for gcc.# Don't ask me what it means.pef.o Ä pef.h pef.c {CHEADERS}  {CC} {cflags} -d KERNEL_CURRENT_VERSION={kernel_current_version} ¶	-d KERNEL_IMPLEMENTATION_VERSION={kernel_implementation_version} ¶	-d KERNEL_CFRG_NAME="¶¶¶"{kernel_cfrg_name}¶¶¶"" ¶	{depdir}pef.c  -o {targdir}pef.o