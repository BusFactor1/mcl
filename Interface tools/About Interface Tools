Documentation for IFT, the MACL Interface Tools Designer.Loading IFTTo load IFT, open the file "make-ift.lisp" and evaluate itscontents. Then evaluate the expression(interface-tools::load-ift).  This recompiles IFT as needed,and loads the ift files in the correct order.Using IFTIFT is meant to be easy and intuitive to use.  A couple tips: Toresize or move the dialog window, hold down the command-key whenyou click in the window.  Clicking in the lower right cornerresizes, and clicking anywhere else moves the window.command-double-click brings up a dialog which allows you to editsome of the attributes of the window (such as the name).To edit a dialog-item, double-click the dialog-item.To try out a dialog, you must switch from design-dialog mode into use-dialogmode, through the Design menu.Extending IFTIt's very easy to extend IFT to handle new kinds of dialog-items. For a class of dialog-items to work with IFT, the class mustspecialize a few object functions.  These functions (all in theINTERFACE-DESIGNER) are:            ADD-EDITOR-ITEMS            OBJECT-SOURCE-CODE            COPY-OBJECTDefinitions of these functions for the built-in dialog-itemclasses in the files "item-defs.lisp" and "ift-utils.lisp".  Bylooking at the definitions for built-in classes, you should getan idea of how to specialize these functions for your ownclasses of dialog-items.ADD-EDITOR-ITEMS lets you extend the dialog-item-editor.  Thislets the dialog-item-edit edit the special features of yourclass of dialog items.OBJECT-SOURCE-CODE generates the source code (a Lisp form) torecreate a dialog-item. It is called when you select "PrintSource" from any of the various menus or windows.COPY-OBJECT is used to support copy/paste of dialog-items.  Thedefault version of COPY-OBJECT clones the object, by creating anew object with the same parents, and the copying all theinstance variables of the copied object.  You may need to zeroout the values of some of these instance variables in the copy(for example, you don't want to copy the value of theDIALOG-ITEM-HANDLE instance variable, because the new item willhave its own handle).To make a dialog-item appear in the dialog-item windoid (so thatit can be dragged/copied into dialog windows), you call thefunction ADD-EDITABLE-DIALOG-ITEM (in the INTERFACE-DESIGNERpackage), passing a prototype dialog-item as the argument.  Itis this item which is added to the windoid, so the item shouldbe a good example of the class.  To remove an item from thewindoid, call REMOVE-EDITABLE-DIALOG-ITEM (in theINTERFACE-DESIGNER package), passing the class as the argument.