;;;-*- Mode: Lisp; Package: CCL -*-;;;;;; ae-misc-suite.lisp;;;;;; Provides basic support for the Misc AppleEvents suite by defining common ;;; event handlers in the suite.;;; Can be specialized for applications or used as it with MCL.;;;;;; Copyright © 1999-2010 Terje Norderhaug andin¥Progress;;;;;; Version: 1.0;;;;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as this copyright ;;; notice is left intact in the source code.;;;;;; Digitool is welcome to integrate parts or whole of this module in MCL without;;; including the copyright note, as long as the author is mentioned in the version history.;;;;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;;;;; Author: Terje Norderhaug <terje@in-progress.com> of Media Design in¥Progress.;;;;;; The most recent version of this module is available from:;;; <http://www.in-progress.com/src/ae-misc-suite.lisp>;;;;;; Tested on MCL 4.2, but should also work with other recent versions of MCL.;;;;;; Note that to get full benefit of this module, MCL (or your application) ;;; should have an AETE resource with a definition for the Misc suite.;;; Without an AETE resource only some of the commands will work from AppleScript,;;; and even those that work will have limited arguments.#| APPLESCRIPT EXAMPLE (requires AETE resource):tell application "MCL"	paste "123456789"	copy (characters 3 thru 6)	paste before character 8	cut (characters 5 thru 7)	paste after character 1	undo	redo	select (characters 4 thru 9)	copy	select every characterend tell|#(in-package :ccl)(eval-when (:execute :load-toplevel)  (require :appleevent-toolkit)  (require :ae-resolve-objects)  (require :ae-core-suite))(defmacro with-restored-selection (window &rest body &aux (w (gensym)) (start (gensym))(end (gensym)))  "Evaluates the body, restoring the original selection afterwards"  `(let ((,w ,window))    (multiple-value-bind (,start ,end)      (selection-range ,w)      (setf ,start (make-mark (fred-buffer ,w) ,start))      (setf ,end (make-mark (fred-buffer ,w) ,end T))      (unwind-protect (progn ,@body)        (set-selection-range ,w ,start ,end)))));; ################################################################################(defmethod application-misc-event-handler (application event reply refcon)  (declare (ignore application refcon))  (let ((command (ae-get-attribute-type event #$keyEventIDAttr))        (object (or (get-ae-parameter #$keyDirectObject event) *application*)))      (misc-event-handler object command event reply)))(install-appleevent-handler #$kAEMiscStandards #$typeWildCard  #'application-misc-event-handler)(defmethod misc-event-handler (object command event reply)  (declare (ignore event reply))  (error 'appleevent-error      :oserr #$errAEEventNotHandled     :error-string (format NIL "No misc event handler for '~A' on ~A" (string command) (type-of object))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CUT(defmethod misc-event-handler (object (command (eql #$kAECut)) event reply)  (declare (ignore event reply))  (cut object))(defmethod cut ((app application))  (cut (front-window)))(defmethod cut ((reference document-content-range))  (let ((window (content-window reference)))    (with-restored-selection window      (select reference)      (cut window))))(defmethod cut ((reference property-reference))  "Cut the selection"  (with-slots (container name) reference    (assert (eq name :|sele|) () "Cannot cut property ~A from ~A" name container)    (cut (front-window))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COPY(defmethod misc-event-handler (object (command (eql #$kAECopy)) event reply)  (declare (ignore event reply))  (copy object))(defmethod copy ((app application))  (copy (front-window)))(defmethod copy ((reference document-content-range))  (let ((window (content-window reference)))    (with-restored-selection window      (select reference)        (copy window))))(defmethod copy ((reference property-reference))  "Cut the selection"  (with-slots (container name) reference    (assert (eq name :|sele|) () "Cannot copy property ~A from ~A" name container)    (copy (front-window))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; PASTE(defmethod misc-event-handler (object (command (eql #$kAEPaste )) event reply)  (declare (ignore reply event))  (paste object))(defmethod paste (object)  (paste (content-window object)))(defmethod paste ((text string))  (declare (ignore event reply))  (let ((window (front-window)))    (ed-insert-with-undo (fred-item window) text)    (fred-update window)))(defmethod paste ((reference document-content-range))  (let ((window (content-window reference)))    (with-restored-selection window      (select reference)        (paste window))))(defmethod paste ((reference insertion-point-reference))  (select reference)  (paste (content-window reference)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; REDO(defmethod misc-event-handler (object (command (eql #$kAERedo)) event reply)  (declare (ignore reply event))  (let ((window (content-window object)))    (when (eq :redo (window-do-operation window 'fred-undo-redo nil))      (undo window))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; REVERT(defmethod misc-event-handler (object (command (eql #$kAERevert)) event reply)  (declare (ignore event reply))  (window-revert (content-window object)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SELECT(defmethod misc-event-handler (object (command (eql #$kAESelect)) event reply)  (declare (ignore event reply))  (select object))(defmethod select ((app application))  (select (front-window)))#+ignore(defmethod select ((window window))  (select-all window))(defmethod select ((window window))  (window-select window)  ; copied from menu-item-action on windows-menu-menu-item in MCL 5.1 - reconsider for other versions  (when (#_iswindowcollapsed (wptr window))    (#_collapsewindow (wptr window) nil)    (window-bring-to-front window)    ;; who knows why tf this is needed    (when (osx-p)       (#_bringtofront (wptr window))      (window-select window))))(defmethod select ((reference insertion-point-reference))  (with-slots (base position) reference    (let ((start (insertion-position base position)))      (set-selection-range (content-window reference) start start))))(defmethod select ((reference document-content-range))  (multiple-value-bind (start end) (character-range reference)    (set-selection-range (content-window reference) start end))) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; UNDO(defmethod misc-event-handler (object (command (eql #$kAEUndo)) event reply)  (declare (ignore reply event))  (let ((window (content-window object)))    (if (eq :undo (window-do-operation window 'fred-undo-redo nil))      (undo window)      (undo-more window))));;; -------------------(provide :ae-misc-suite)