;;;-*- Mode: Lisp; Package: CCL -*-;;;;;; ae-recordable.lisp;;;;;; Makes MCL and its applications Recordable by AppleScript/OSA.;;;;;; Copyright © 1999-2010 Terje Norderhaug;;;;;; Version: 1.0.1;;;;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as this copyright ;;; notice is left intact in the source code.;;;;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;;;;; Author: Terje Norderhaug <terje@in-progress.com>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; After loading this module, use a scripting application like the AppleScript Editor from;;; Apple to record events in MCL or your application. Start the recording in the scripting;;; software, then choose various menus in MCL and see how they are recorded.;;; Note that without an AETE resource, many of the events might not be recorded;;; as pretty scripting commands like "cut" but instead as Çevent misccut È.;;; See the enclose .rsrc AETE resource for MCL and its applications.(in-package :ccl)(eval-when (:execute :load-toplevel)  (require :appleevent-toolkit)  (require :defappleevents)  (require :ae-resolve-objects)  (require :ae-core-suite)  (require :ae-misc-suite))(eval-when (:execute :load-toplevel :compile-toplevel)  (import 'defappleevents:defappleevent));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ACTIVATE RECORDING(defvar *recording-enabled* NIL)(defvar *toggle-recording* T)(defmethod notify-start-recording-handler ((a application) event reply refcon)  (declare (ignore application event reply refcon))  (when *toggle-recording*    (setf *recording-enabled* T)))(defmethod notify-stop-recording-handler ((a application) event reply refcon)  (declare (ignore application event reply refcon))  (when *toggle-recording*    (setf *recording-enabled* NIL)))(eval-when (:load-toplevel :execute)  (install-appleevent-handler #$kCoreEventClass #$kAENotifyStartRecording     #'notify-start-recording-handler)  (install-appleevent-handler #$kCoreEventClass #$kAENotifyStopRecording      #'notify-stop-recording-handler)  (install-appleevent-handler #$kCoreEventClass :|rec9|    #'(lambda (application event reply refcon)        (declare (ignore application event reply refcon)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DO MENU(defappleevent do-menu-event #$kAEMiscStandards :|menu|   ((menu #$keyDirectObject :desired-type #$typeLongInteger)   (menu-item :|menn|))  ())(defmethod misc-event-handler ((menu-id number)(command (eql :|menu|)) event reply)  (declare (ignore reply))  (let* ((menu (menu-object menu-id))         (menu-item (find-menu-item menu (do-menu-event-menu-item event))))    (handler-case      (menu-item-action menu-item)      (error (condition)        (application-error *application* condition (%get-frame-ptr))))))(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))(defmethod menu-select ((menu menu) num)  (let* ((menu-item (elt (slot-value menu 'item-list) (%i- num 1))))    (if *recording-enabled*      (if (method-exists-p 'menu-item-event menu-item)        (menu-item-event menu-item)        (with-aedescs (event reply target)          (create-self-target target)          (make-do-menu-event event target             :menu (menu-id menu)            :menu-item (menu-item-title menu-item))           (send-appleevent event reply :interact-mode :always-interact)))      (menu-item-action menu-item))))) ;; redefine;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CUT(defappleevent cut-event #$kAEMiscStandards #$kAECut   ((reference #$keyDirectObject))  ())(defmethod menu-item-event ((menu-item (eql (find-menu-item (edit-menu) "Cut"))))  (with-aedescs (event reply target)     (create-self-target target)     (make-cut-event event target)     (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CLOSE(defappleevent close-event #$kAECoreSuite #$kAEClose () ())(defmethod menu-item-event ((menu-item (eql (find-menu-item (find-menu "File") "Close"))))  (with-aedescs (event reply target)     (create-self-target target)     (make-close-event event target)     (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; COPY(defappleevent copy-event #$kAEMiscStandards #$kAECopy   ((reference #$keyDirectObject))   ())(defmethod menu-item-event ((menu-item (eql (find-menu-item (edit-menu) "Copy"))))  (with-aedescs (event reply target)     (create-self-target target)     (make-copy-event event target)     (ae-get-parameter-char event #$keyAEData NIL) ;; ??     (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; NEW(defappleevent create-element-event #$kAECoreSuite #$kAECreateElement   ((reference #$keyDirectObject)   (location #$keyAEInsertHere)   (class #$keyAEObjectClass :desired-type #$typeType)   (data #$keyAEData))   ())(defmethod menu-item-event ((menu-item (eql (find-menu-item (find-menu "File") "New"))))  (with-aedescs (event reply target)     (create-self-target target)     (make-create-element-event event target       :class #$cDocument)     (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; PASTE(defappleevent paste-event #$kAEMiscStandards #$kAEPaste   ((reference #$keyDirectObject))   ())(defmethod menu-item-event ((menu-item (eql (find-menu-item (edit-menu) "Paste"))))  (with-aedescs (event reply target)    (create-self-target target)    (make-paste-event event target)    (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; QUIT(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))(defun confirmed-quit ()  (unless (command-key-p)          (y-or-n-dialog (format nil "Do you really want to quit from ~A ?"                                   (current-app-name))                           :yes-text "Quit"                           :cancel-text nil                           :help-spec '(:dialog 11110 :yes-text 11111 :no-text 11112)))      (with-aedescs (event reply target)        (create-self-target target)        (create-quit event target)        (send-appleevent event reply :interact-mode :always-interact))      ;; In case appleevent doesn't complete the job (fails in MCL 4.2, will work in MCL 4.3 and later):      (quit)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; REDO(defappleevent redo-event #$kAEMiscStandards #$kAERedo   ()   ())(defmethod menu-item-event ((menu-item (eql (first (menu-items (edit-menu))))))  (with-aedescs (event reply target)    (create-self-target target)    (if (eq :redo (window-do-operation (get-window-event-handler) 'fred-undo-redo nil))      (make-redo-event event target)      (make-undo-event event target))    (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; REVERT(defappleevent revert-event #$kAEMiscStandards #$kAERevert ()  ())(defmethod menu-item-event ((menu-item (eql (find-menu-item (find-menu "File") "Revert"))))  (with-aedescs (event reply target)    (create-self-target target)    (make-revert-event event target)    (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SAVE(defappleevent save-event #$kAECoreSuite #$kAESave ()())(defmethod menu-item-event ((menu-item (eql (find-menu-item (find-menu "File") "Save"))))  (with-aedescs (event reply target)     (create-self-target target)     (make-save-event event target)     (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SELECT(defappleevent select-event #$kAEMiscStandards #$kAESelect   ((reference #$keyDirectObject))    ())#+ignore ; does not work(defmethod menu-item-event ((menu-item (eql (find-menu-item (edit-menu) "Select All"))))  (with-aedescs (event reply target)    (create-self-target target)    (make-select-event event target)    (send-appleevent event reply)))(defmethod menu-item-event ((menu-item (eql (find-menu-item (edit-menu) "Select All"))))  ;; should be implemented, this just do the same as in menu-select (as if method was not defined)  (with-aedescs (event reply target)    (create-self-target target)    (make-do-menu-event event target                         :menu (menu-id (menu-item-owner menu-item))                        :menu-item (menu-item-title menu-item))     (send-appleevent event reply :interact-mode :always-interact)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; UNDO(defappleevent undo-event #$kAEMiscStandards  #$kAEUndo  ()   ())(defmethod menu-item-event ((menu-item (eql (second (menu-items (edit-menu))))))  (with-aedescs (event reply target)    (create-self-target target)    (if (eq :redo (window-do-operation (get-window-event-handler) 'fred-undo-redo nil))      (make-undo-event event target)      (make-redo-event event target))    (send-appleevent event reply)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; WINDOWS MENU ITEMS(defmethod menu-item-event ((item windows-menu-menu-item))  ; replicates the menu-item-action on windows-menu-menu-item using appleevents  ; although some of the functionality (with option keys) is not implemented.  (let ((window (slot-value item 'my-window)))    (with-aedescs (event reply target)      (create-self-target target)      (make-select-event event target :reference window)      (send-appleevent event reply))));;;(provide :ae-recordable)