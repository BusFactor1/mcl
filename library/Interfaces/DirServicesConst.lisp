(in-package :TRAPS)
; Generated from #P"macintosh-hd:hd3:CInterface Translator:Source Interfaces:DirServicesConst.h"
; at Sunday July 2,2006 7:27:32 pm.
; 
;  * Copyright (c) 2002 Apple Computer, Inc. All rights reserved.
;  *
;  * @APPLE_LICENSE_HEADER_START@
;  * 
;  * This file contains Original Code and/or Modifications of Original Code
;  * as defined in and that are subject to the Apple Public Source License
;  * Version 2.0 (the 'License'). You may not use this file except in
;  * compliance with the License. Please obtain a copy of the License at
;  * http://www.opensource.apple.com/apsl/ and read it before using this
;  * file.
;  * 
;  * The Original Code and all software distributed under the License are
;  * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
;  * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
;  * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
;  * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
;  * Please see the License for the specific language governing rights and
;  * limitations under the License.
;  * 
;  * @APPLE_LICENSE_HEADER_END@
;  
; !
;  * @header DirServicesConst
;  
; #ifndef __DirServicesConst_h__
(defconstant $__DirServicesConst_h__ 1)
; #define	__DirServicesConst_h__	1
; !
;  * @header DirectoryServices
;  * This header contains well known attribute and record type constants.
;  * They can be used with dsDataNodeAllocateString() to create a data node to pass to a
;  * Directory Services API call.
;  * Legend:
;  *
;  *		eDS1xxxxxx  Single Valued Attribute
;  *
;  *		eDSNxxxxxx  Multi-Valued Attribute
;  *
;  *	NOTE: Access controls may prevent any particular client from reading/writting
;  *			various attributes.  In addition some attributes may not be stored at
;  *			all and could represent "real-time" data generated by the directory node
;  *			plug-in.
;  *
;  *	NOTE #2: Attributes in the model are available for records & directory nodes.
;  
;  all records
(defconstant $kDSRecordsAll "dsRecordsAll")
; #define		kDSRecordsAll					"dsRecordsAll"
(defconstant $kDSRecordsStandardAll "dsRecordsStandardAll")
; #define		kDSRecordsStandardAll			"dsRecordsStandardAll"
(defconstant $kDSRecordsNativeAll "dsRecordsNativeAll")
; #define		kDSRecordsNativeAll				"dsRecordsNativeAll"
;  all attributes
(defconstant $kDSAttributesAll "dsAttributesAll")
; #define		kDSAttributesAll				"dsAttributesAll"
(defconstant $kDSAttributesStandardAll "dsAttributesStandardAll")
; #define		kDSAttributesStandardAll		"dsAttributesStandardAll"
(defconstant $kDSAttributesNativeAll "dsAttributesNativeAll")
; #define		kDSAttributesNativeAll			"dsAttributesNativeAll"
;  well known Record types
(defconstant $kDSStdRecordTypePrefix "dsRecTypeStandard:")
; #define		kDSStdRecordTypePrefix			"dsRecTypeStandard:"
(defconstant $kDSNativeRecordTypePrefix "dsRecTypeNative:")
; #define		kDSNativeRecordTypePrefix		"dsRecTypeNative:"
(defconstant $kDSStdRecordTypeUsers "dsRecTypeStandard:Users")
; #define		kDSStdRecordTypeUsers			"dsRecTypeStandard:Users"
(defconstant $kDSStdRecordTypeUserAliases "dsRecTypeStandard:UserAliases")
; #define		kDSStdRecordTypeUserAliases		"dsRecTypeStandard:UserAliases"
(defconstant $kDSStdRecordTypeGroups "dsRecTypeStandard:Groups")
; #define		kDSStdRecordTypeGroups			"dsRecTypeStandard:Groups"
(defconstant $kDSStdRecordTypeGroupAliases "dsRecTypeStandard:GroupAliases")
; #define		kDSStdRecordTypeGroupAliases	"dsRecTypeStandard:GroupAliases"
(defconstant $kDSStdRecordTypeMachines "dsRecTypeStandard:Machines")
; #define		kDSStdRecordTypeMachines		"dsRecTypeStandard:Machines"
(defconstant $kDSStdRecordTypeAliases "dsRecTypeStandard:Aliases")
; #define		kDSStdRecordTypeAliases			"dsRecTypeStandard:Aliases"
(defconstant $kDSStdRecordTypeHosts "dsRecTypeStandard:Hosts")
; #define		kDSStdRecordTypeHosts			"dsRecTypeStandard:Hosts"
(defconstant $kDSStdRecordTypePrinters "dsRecTypeStandard:Printers")
; #define		kDSStdRecordTypePrinters		"dsRecTypeStandard:Printers"
(defconstant $kDSStdRecordTypeNetworks "dsRecTypeStandard:Networks")
; #define		kDSStdRecordTypeNetworks		"dsRecTypeStandard:Networks"
(defconstant $kDSStdRecordTypeServices "dsRecTypeStandard:Services")
; #define		kDSStdRecordTypeServices		"dsRecTypeStandard:Services"
(defconstant $kDSStdRecordTypeServer "dsRecTypeStandard:Server")
; #define		kDSStdRecordTypeServer			"dsRecTypeStandard:Server"
(defconstant $kDSStdRecordTypProtocols "dsRecTypeStandard:Protocols")
; #define		kDSStdRecordTypProtocols		"dsRecTypeStandard:Protocols"
(defconstant $kDSStdRecordTypeProtocols "dsRecTypeStandard:Protocols")
; #define		kDSStdRecordTypeProtocols		"dsRecTypeStandard:Protocols"
(defconstant $kDSStdRecordTypRPC "dsRecTypeStandard:RPC")
; #define		kDSStdRecordTypRPC				"dsRecTypeStandard:RPC"
(defconstant $kDSStdRecordTypeRPC "dsRecTypeStandard:RPC")
; #define		kDSStdRecordTypeRPC				"dsRecTypeStandard:RPC"
(defconstant $kDSStdRecordTypePrintService "dsRecTypeStandard:PrintService")
; #define		kDSStdRecordTypePrintService	"dsRecTypeStandard:PrintService"
(defconstant $kDSStdRecordTypeConfig "dsRecTypeStandard:Config")
; #define		kDSStdRecordTypeConfig			"dsRecTypeStandard:Config"
(defconstant $kDSStdRecordTypeAFPServer "dsRecTypeStandard:AFPServer")
; #define		kDSStdRecordTypeAFPServer		"dsRecTypeStandard:AFPServer"
(defconstant $kDSStdRecordTypeSMBServer "dsRecTypeStandard:SMBServer")
; #define		kDSStdRecordTypeSMBServer		"dsRecTypeStandard:SMBServer"
(defconstant $kDSStdRecordTypeFTPServer "dsRecTypeStandard:FTPServer")
; #define		kDSStdRecordTypeFTPServer		"dsRecTypeStandard:FTPServer"
(defconstant $kDSStdRecordTypeNFS "dsRecTypeStandard:NFS")
; #define		kDSStdRecordTypeNFS				"dsRecTypeStandard:NFS"
(defconstant $kDSStdRecordTypeWebServer "dsRecTypeStandard:WebServer")
; #define		kDSStdRecordTypeWebServer		"dsRecTypeStandard:WebServer"
(defconstant $kDSStdRecordTypeLDAPServer "dsRecTypeStandard:LDAPServer")
; #define		kDSStdRecordTypeLDAPServer		"dsRecTypeStandard:LDAPServer"
(defconstant $kDSStdRecordTypeQTSServer "dsRecTypeStandard:QTSServer")
; #define		kDSStdRecordTypeQTSServer		"dsRecTypeStandard:QTSServer"
(defconstant $kDSStdRecordTypMounts "dsRecTypeStandard:Mounts")
; #define		kDSStdRecordTypMounts			"dsRecTypeStandard:Mounts"
(defconstant $kDSStdRecordTypeMounts "dsRecTypeStandard:Mounts")
; #define		kDSStdRecordTypeMounts			"dsRecTypeStandard:Mounts"
(defconstant $kDSStdRecordTypeComputers "dsRecTypeStandard:Computers")
; #define		kDSStdRecordTypeComputers		"dsRecTypeStandard:Computers"
(defconstant $kDSStdRecordTypeComputerLists "dsRecTypeStandard:ComputerLists")
; #define		kDSStdRecordTypeComputerLists	"dsRecTypeStandard:ComputerLists"
(defconstant $kDSStdRecordTypePresetUsers "dsRecTypeStandard:PresetUsers")
; #define		kDSStdRecordTypePresetUsers		"dsRecTypeStandard:PresetUsers"
(defconstant $kDSStdRecordTypePresetGroups "dsRecTypeStandard:PresetGroups")
; #define		kDSStdRecordTypePresetGroups	"dsRecTypeStandard:PresetGroups"
(defconstant $kDSStdRecordTypePresetComputerLists "dsRecTypeStandard:PresetComputerLists")
; #define		kDSStdRecordTypePresetComputerLists	"dsRecTypeStandard:PresetComputerLists"
; !
;  * @defined kDSStdRecordTypeAutoServerSetup
;  * @discussion Used to discover automated server setup information.
;  
(defconstant $kDSStdRecordTypeAutoServerSetup "dsRecTypeStandard:AutoServerSetup")
; #define		kDSStdRecordTypeAutoServerSetup		"dsRecTypeStandard:AutoServerSetup"
; !
;  * @defined kDSStdRecordTypePrintServiceUser
;  * @discussion Record in the local node for storing quota usage for a user.
;  
(defconstant $kDSStdRecordTypePrintServiceUser "dsRecTypeStandard:PrintServiceUser")
; #define		kDSStdRecordTypePrintServiceUser	"dsRecTypeStandard:PrintServiceUser"
(defconstant $kDSStdRecordTypeAFPUserAliases "dsRecTypeStandard:AFPUserAliases")
; #define		kDSStdRecordTypeAFPUserAliases	"dsRecTypeStandard:AFPUserAliases"
; !
;  * @defined kDSStdRecordTypeBootp
;  * @discussion Record in the local node for storing bootp info.
;  
(defconstant $kDSStdRecordTypeBootp "dsRecTypeStandard:Bootp")
; #define		kDSStdRecordTypeBootp	"dsRecTypeStandard:Bootp"
; !
;  * @defined kDSStdRecordTypeNetDomains
;  * @discussion Record in the local node for storing net domains.
;  
(defconstant $kDSStdRecordTypeNetDomains "dsRecTypeStandard:NetDomains")
; #define		kDSStdRecordTypeNetDomains	"dsRecTypeStandard:NetDomains"
; !
;  * @defined kDSStdRecordTypeEthernets
;  * @discussion Record in the local node for storing ethernets.
;  
(defconstant $kDSStdRecordTypeEthernets "dsRecTypeStandard:Ethernets")
; #define		kDSStdRecordTypeEthernets	"dsRecTypeStandard:Ethernets"
; !
;  * @defined kDSStdRecordTypeNetGroups
;  * @discussion Record in the local node for storing net groups.
;  
(defconstant $kDSStdRecordTypeNetGroups "dsRecTypeStandard:NetGroups")
; #define		kDSStdRecordTypeNetGroups	"dsRecTypeStandard:NetGroups"
; !
;  * @defined kDSStdRecordTypeHostServices
;  * @discussion Record in the local node for storing host services.
;  
(defconstant $kDSStdRecordTypeHostServices "dsRecTypeStandard:HostServices")
; #define		kDSStdRecordTypeHostServices	"dsRecTypeStandard:HostServices"
(defconstant $kDSStdUserNamesMeta "dsRecTypeStandard:MetaUserNames")
; #define		kDSStdUserNamesMeta				"dsRecTypeStandard:MetaUserNames"
(defconstant $kDSStdRecordTypeMeta "dsRecTypeStandard:AppleMetaRecord")
; #define		kDSStdRecordTypeMeta			"dsRecTypeStandard:AppleMetaRecord"
; !
;  * @defined kDSStdRecordTypePasswordServer
;  * @discussion Used to discover password servers via Rendezvous.
;  
(defconstant $kDSStdRecordTypePasswordServer "dsRecTypeStandard:PasswordServer")
; #define		kDSStdRecordTypePasswordServer		"dsRecTypeStandard:PasswordServer"
; !
;  * @defined kDSStdRecordTypePeople
;  * @discussion Record type that contains "People" records used for contact information.
;  
(defconstant $kDSStdRecordTypePeople "dsRecTypeStandard:People")
; #define		kDSStdRecordTypePeople			"dsRecTypeStandard:People"
; !
;  * @defined kDSStdRecordTypeLocations
;  * @discussion Location record type.
;  
(defconstant $kDSStdRecordTypeLocations "dsRecTypeStandard:Locations")
; #define		kDSStdRecordTypeLocations		"dsRecTypeStandard:Locations"
;  well known Attribute Types...
(defconstant $kDSStdAttrTypePrefix "dsAttrTypeStandard:")
; #define		kDSStdAttrTypePrefix			"dsAttrTypeStandard:"
(defconstant $kDSNativeAttrTypePrefix "dsAttrTypeNative:")
; #define		kDSNativeAttrTypePrefix			"dsAttrTypeNative:"
(defconstant $kDSAttrNone "dsNone")
; #define		kDSAttrNone						"dsNone"
;  authentication methods
(defconstant $kDSStdAuthMethodPrefix "dsAuthMethodStandard:")
; #define		kDSStdAuthMethodPrefix				"dsAuthMethodStandard:"
(defconstant $kDSNativeAuthMethodPrefix "dsAuthMethodNative:")
; #define		kDSNativeAuthMethodPrefix			"dsAuthMethodNative:"
(defconstant $kDSStdAuthClearText "dsAuthMethodStandard:dsAuthClearText")
; #define		kDSStdAuthClearText					"dsAuthMethodStandard:dsAuthClearText"
; !
;  * @defined kDSStdAuthGetKerberosPrincipal
;  * @discussion Kerberos Principal name.
;  
(defconstant $kDSStdAuthGetKerberosPrincipal "dsAuthMethodStandard:dsAuthGetKerberosPrincipal")
; #define		kDSStdAuthGetKerberosPrincipal		"dsAuthMethodStandard:dsAuthGetKerberosPrincipal"
; !
;  * @defined kDSStdAuthMPPEMasterKeys
;  * @discussion Generated 40-bit or 128-bit master keys from MS-CHAPv2 credentials (RFC 3079).
;  
(defconstant $kDSStdAuthMPPEMasterKeys "dsAuthMethodStandard:dsAuthMPPEMasterKeys")
; #define kDSStdAuthMPPEMasterKeys				"dsAuthMethodStandard:dsAuthMPPEMasterKeys"
; !
;  * @defined kDSValueNonCryptPasswordMarker
;  * @discussion Marker used for password attribute value indicating non-crypt authentication.
;  
(defconstant $kDSValueNonCryptPasswordMarker "********")
; #define		kDSValueNonCryptPasswordMarker	"********"
; !
;  * @defined kDSStdMachPortName
;  * @discussion Registered name used with mach_init for DirectoryService daemon.
;  
(defconstant $kDSStdMachPortName "com.apple.DirectoryService")
; #define		kDSStdMachPortName	"com.apple.DirectoryService"
; !
;  * @defined kDSStdRecordTypeSharePoints
;  * @discussion Share point record type.
;  
(defconstant $kDSStdRecordTypeSharePoints "dsRecTypeStandard:SharePoints")
; #define		kDSStdRecordTypeSharePoints	"dsRecTypeStandard:SharePoints"
; !
;  * @defined kDS1AttrRelativeDNPrefix
;  * @discussion Used to map the first native LDAP attribute type required in the building of the
;  *  Relative Distinguished Name for LDAP record creation.
;  
(defconstant $kDS1AttrRelativeDNPrefix "dsAttrTypeStandard:RelativeDNPrefix")
; #define		kDS1AttrRelativeDNPrefix	"dsAttrTypeStandard:RelativeDNPrefix"
; !
;  * @defined kDSStdAuthSetPolicyAsRoot
;  * @discussion A two-item buffer version of set policy for the password server.
;  
(defconstant $kDSStdAuthSetPolicyAsRoot "dsAuthMethodStandard:dsAuthSetPolicyAsRoot")
; #define		kDSStdAuthSetPolicyAsRoot	"dsAuthMethodStandard:dsAuthSetPolicyAsRoot"
; !
;  * @defined kDSStdAuthGetEffectivePolicy
;  * @discussion Used to extract, from a password server, the actual policies that will be applied
;   *    to a user; a combination of global and user policies.
;  
(defconstant $kDSStdAuthGetEffectivePolicy "dsAuthMethodStandard:dsAuthGetEffectivePolicy")
; #define		kDSStdAuthGetEffectivePolicy	"dsAuthMethodStandard:dsAuthGetEffectivePolicy"
; !
;  * @defined kDSStdAuthCrypt
;  * @discussion Use a crypt password stored in the user record if available to
;  *     do the authentication. The buffer is packed as follows:
;  *
;  *     4 byte length of username,
;  *     username in UTF8 encoding,
;  *     4 byte length of password,
;  *     password in UTF8 encoding
;  *
;  *     This method may not be supported by all plug-ins or for all users.
;  
(defconstant $kDSStdAuthCrypt "dsAuthMethodStandard:dsAuthCrypt")
; #define		kDSStdAuthCrypt						"dsAuthMethodStandard:dsAuthCrypt"
(defconstant $kDSStdAuthSetPasswd "dsAuthMethodStandard:dsAuthSetPasswd")
; #define		kDSStdAuthSetPasswd					"dsAuthMethodStandard:dsAuthSetPasswd"
; !
;  * @defined kDSStdAuthChangePasswd
;  * @discussion Change the password for a user. Does not require prior authentication.
;  *     The buffer is packed as follows:
;  *
;  *     4 byte length of username,
;  *     username in UTF8 encoding,
;  *     4 byte length of old password,
;  *     old password in UTF8 encoding,
;  *     4 byte length of new password,
;  *     new password in UTF8 encoding
;  
(defconstant $kDSStdAuthChangePasswd "dsAuthMethodStandard:dsAuthChangePasswd")
; #define		kDSStdAuthChangePasswd				"dsAuthMethodStandard:dsAuthChangePasswd"
(defconstant $kDSStdAuthSetPasswdAsRoot "dsAuthMethodStandard:dsAuthSetPasswdAsRoot")
; #define		kDSStdAuthSetPasswdAsRoot			"dsAuthMethodStandard:dsAuthSetPasswdAsRoot"
; !
;  * @defined kDSStdAuth2WayRandomChangePasswd
;  * @discussion Change the password for a user using the two-way random method.
;  *     Does not require prior authentication.
;  *     The buffer is packed as follows:
;  *
;  *     4 byte length of username,
;  *     username in UTF8 encoding,
;  *     4 byte length of old password encrypted with new (should be 8),
;  *     old password encrypted with new,
;  *     4 byte length of new password encrypted with old (should be 8),
;  *     new password encrypted with old
;  
(defconstant $kDSStdAuth2WayRandomChangePasswd "dsAuthMethodStandard:dsAuth2WayRandomChangePasswd")
; #define		kDSStdAuth2WayRandomChangePasswd	"dsAuthMethodStandard:dsAuth2WayRandomChangePasswd"
(defconstant $kDSStdAuthAPOP "dsAuthMethodStandard:dsAuthAPOP")
; #define		kDSStdAuthAPOP						"dsAuthMethodStandard:dsAuthAPOP"
(defconstant $kDSStdAuth2WayRandom "dsAuthMethodStandard:dsAuth2WayRandom")
; #define		kDSStdAuth2WayRandom				"dsAuthMethodStandard:dsAuth2WayRandom"
; !
;  * @defined kDSStdAuthNodeNativeClearTextOK
;  * @discussion The plug-in should determine which specific authentication method to use.
;  *     The buffer is packed as follows:
;  *
;  *     4 byte length of username,
;  *     username in UTF8 encoding,
;  *     4 byte length of password,
;  *     password in UTF8 encoding
;  *
;  *     The plug-in may choose to use a cleartext authentication method if necessary.
;  
(defconstant $kDSStdAuthNodeNativeClearTextOK "dsAuthMethodStandard:dsAuthNodeNativeCanUseClearText")
; #define		kDSStdAuthNodeNativeClearTextOK		"dsAuthMethodStandard:dsAuthNodeNativeCanUseClearText"
; !
;  * @defined kDSStdAuthNodeNativeNoClearText
;  * @discussion The plug-in should determine which specific authentication method to use.
;  *     The buffer is packed as follows:
;  *
;  *     4 byte length of username,
;  *     username in UTF8 encoding,
;  *     4 byte length of password,
;  *     password in UTF8 encoding
;  *
;  *     The plug-in must not use an authentication method that sends the password in cleartext.
;  
(defconstant $kDSStdAuthNodeNativeNoClearText "dsAuthMethodStandard:dsAuthNodeNativeCannotUseClearText")
; #define		kDSStdAuthNodeNativeNoClearText		"dsAuthMethodStandard:dsAuthNodeNativeCannotUseClearText"
(defconstant $kDSStdAuthSMB_NT_Key "dsAuthMethodStandard:dsAuthSMBNTKey")
; #define		kDSStdAuthSMB_NT_Key				"dsAuthMethodStandard:dsAuthSMBNTKey"
(defconstant $kDSStdAuthSMB_LM_Key "dsAuthMethodStandard:dsAuthSMBLMKey")
; #define		kDSStdAuthSMB_LM_Key				"dsAuthMethodStandard:dsAuthSMBLMKey"
(defconstant $kDSStdAuthCRAM_MD5 "dsAuthMethodStandard:dsAuthNodeCRAM-MD5")
; #define		kDSStdAuthCRAM_MD5					"dsAuthMethodStandard:dsAuthNodeCRAM-MD5"
(defconstant $kDSStdAuthDIGEST_MD5 "dsAuthMethodStandard:dsAuthNodeDIGEST-MD5")
; #define		kDSStdAuthDIGEST_MD5				"dsAuthMethodStandard:dsAuthNodeDIGEST-MD5"
; !
;  * @defined kDSStdAuthSecureHash
;  * @discussion
;  *     Auth specifically using the secure hash.
;  
(defconstant $kDSStdAuthSecureHash "dsAuthMethodStandard:dsAuthSecureHash")
; #define		kDSStdAuthSecureHash				"dsAuthMethodStandard:dsAuthSecureHash"
; !
;  * @defined kDSStdAuthReadSecureHash
;  * @discussion
;  *     Supports ONLY a root process to be able to directly read the secure hash of a user record.
;  
(defconstant $kDSStdAuthReadSecureHash "dsAuthMethodStandard:dsAuthReadSecureHash")
; #define		kDSStdAuthReadSecureHash				"dsAuthMethodStandard:dsAuthReadSecureHash"
; !
;  * @defined kDSStdAuthWriteSecureHash
;  * @discussion
;  *     Supports ONLY a root process to be able to directly write the secure hash of a user record.
;  
(defconstant $kDSStdAuthWriteSecureHash "dsAuthMethodStandard:dsAuthWriteSecureHash")
; #define		kDSStdAuthWriteSecureHash				"dsAuthMethodStandard:dsAuthWriteSecureHash"
; !
;  * @defined PDC_SMB_Constants
;  * @discussion
;  *     Related constants for supporting PDC SMB interaction with DS.
;  
(defconstant $kDSStdAuthSMB_NT_UserSessionKey "dsAuthMethodStandard:dsAuthSMBNTUserSessionKey")
; #define		kDSStdAuthSMB_NT_UserSessionKey					"dsAuthMethodStandard:dsAuthSMBNTUserSessionKey"
(defconstant $kDSStdAuthSMBWorkstationCredentialSessionKey "dsAuthMethodStandard:dsAuthSMBWorkstationCredentialSessionKey")
; #define		kDSStdAuthSMBWorkstationCredentialSessionKey	"dsAuthMethodStandard:dsAuthSMBWorkstationCredentialSessionKey"
(defconstant $kDSStdAuthSetWorkstationPasswd "dsAuthMethodStandard:dsAuthSetWorkstationPasswd")
; #define		kDSStdAuthSetWorkstationPasswd					"dsAuthMethodStandard:dsAuthSetWorkstationPasswd"
(defconstant $kDS1AttrSMBRID "dsAttrTypeStandard:SMBRID")
; #define 	kDS1AttrSMBRID									"dsAttrTypeStandard:SMBRID"
(defconstant $kDS1AttrSMBGroupRID "dsAttrTypeStandard:SMBGroupRID")
; #define 	kDS1AttrSMBGroupRID								"dsAttrTypeStandard:SMBGroupRID"
; !
;  * @defined kDS1AttrSMBHomeDrive
;  * @discussion
;  *     Drive letter for homedirectory mount point.
;  
(defconstant $kDS1AttrSMBHomeDrive "dsAttrTypeStandard:SMBHomeDrive")
; #define 	kDS1AttrSMBHomeDrive			"dsAttrTypeStandard:SMBHomeDrive"
; !
;  * @defined kDS1AttrSMBHome
;  * @discussion
;  *     UNC address of Windows homedirectory mount point (\\server\\sharepoint).
;  
(defconstant $kDS1AttrSMBHome "dsAttrTypeStandard:SMBHome")
; #define 	kDS1AttrSMBHome					"dsAttrTypeStandard:SMBHome"
; !
;  * @defined kDS1AttrSMBScriptPath
;  * @discussion
;  *     Login script path.
;  
(defconstant $kDS1AttrSMBScriptPath "dsAttrTypeStandard:SMBScriptPath")
; #define 	kDS1AttrSMBScriptPath			"dsAttrTypeStandard:SMBScriptPath"
; !
;  * @defined kDS1AttrSMBProfilePath
;  * @discussion
;  *     Desktop management info (dock, desktop links, etc).
;  
(defconstant $kDS1AttrSMBProfilePath "dsAttrTypeStandard:SMBProfilePath")
; #define		kDS1AttrSMBProfilePath			"dsAttrTypeStandard:SMBProfilePath"
; !
;  * @defined kDS1AttrSMBUserWorkstations
;  * @discussion
;  *     List of workstations user can login from (machine account names).
;  
(defconstant $kDS1AttrSMBUserWorkstations "dsAttrTypeStandard:SMBUserWorkstations")
; #define		kDS1AttrSMBUserWorkstations 	"dsAttrTypeStandard:SMBUserWorkstations"
; !
;  * @defined Account_Control_Flags
;  * @discussion
;  *     Set of account control flags.
;  
(defconstant $kDS1AttrSMBAcctFlags "dsAttrTypeStandard:SMBAccountFlags")
; #define		kDS1AttrSMBAcctFlags			"dsAttrTypeStandard:SMBAccountFlags"
(defconstant $kDS1AttrSMBPWDLastSet "dsAttrTypeStandard:SMBPasswordLastSet")
; #define		kDS1AttrSMBPWDLastSet			"dsAttrTypeStandard:SMBPasswordLastSet"
(defconstant $kDS1AttrSMBLogonTime "dsAttrTypeStandard:SMBLogonTime")
; #define		kDS1AttrSMBLogonTime			"dsAttrTypeStandard:SMBLogonTime"
(defconstant $kDS1AttrSMBLogoffTime "dsAttrTypeStandard:SMBLogoffTime")
; #define		kDS1AttrSMBLogoffTime			"dsAttrTypeStandard:SMBLogoffTime"
(defconstant $kDS1AttrSMBKickoffTime "dsAttrTypeStandard:SMBKickoffTime")
; #define		kDS1AttrSMBKickoffTime 			"dsAttrTypeStandard:SMBKickoffTime"
; !
;  * @defined kDS1AttrPasswordServerList
;  * @discussion Represents the attribute for storing the password server's replication information.
;  
(defconstant $kDS1AttrPasswordServerList "dsAttrTypeStandard:PasswordServerList")
; #define		kDS1AttrPasswordServerList		"dsAttrTypeStandard:PasswordServerList"
; !
;  * @defined kDS1AttrAlternateDatastoreLocation
;  * @discussion Unix path used for determining where a user's email is stored.
;  
(defconstant $kDS1AttrAlternateDatastoreLocation "dsAttrTypeStandard:AlternateDatastoreLocation")
; #define		kDS1AttrAlternateDatastoreLocation	"dsAttrTypeStandard:AlternateDatastoreLocation"
; !
;  * @defined kDSStdAuthMSCHAP2
;  * @discussion
;  *     MS-CHAP2 is a mutual authentication method. The plug-in will generate the data to
;  *     send back to the client and put it in the step buffer.
;  *
;  *     The input buffer format:
;  *     4 byte length,
;  *     username,
;  *     4 byte length,
;  *     server challenge,
;  *     4 byte length,
;  *     peer challenge,
;  *     4 byte length,
;  *     client's digest,
;  *
;  *     The output buffer format:
;  *     4 byte length,
;  *     return digest for the client's challenge
;  
(defconstant $kDSStdAuthMSCHAP2 "dsAuthMethodStandard:dsAuthMSCHAP2")
; #define		kDSStdAuthMSCHAP2				"dsAuthMethodStandard:dsAuthMSCHAP2"
(defconstant $kDSStdAuthMSCHAP1 "dsAuthMethodStandard:dsAuthMSCHAP1")
; #define		kDSStdAuthMSCHAP1				"dsAuthMethodStandard:dsAuthMSCHAP1"
(defconstant $kDSStdAuthCHAP "dsAuthMethodStandard:dsAuthCHAP")
; #define		kDSStdAuthCHAP					"dsAuthMethodStandard:dsAuthCHAP"
(defconstant $kDSStdAuthMASKE_A "dsAuthMethodStandard:dsAuthMASKE-A")
; #define		kDSStdAuthMASKE_A				"dsAuthMethodStandard:dsAuthMASKE-A"
(defconstant $kDSStdAuthMASKE_B "dsAuthMethodStandard:dsAuthMASKE-B")
; #define		kDSStdAuthMASKE_B				"dsAuthMethodStandard:dsAuthMASKE-B"
; !
;  * @defined kDSStdAuthWithAuthorizationRef
;  * @discussion
;  *     Allows access to local directories as root with a valid AuthorizationRef.
;  *
;  *     The input buffer format:
;  *     externalized AuthorizationRef
;  
(defconstant $kDSStdAuthWithAuthorizationRef "dsAuthMethodStandard:dsAuthWithAuthorizationRef")
; #define		kDSStdAuthWithAuthorizationRef				"dsAuthMethodStandard:dsAuthWithAuthorizationRef"
; !
;  * @defined kDSStdAuthNewUser
;  * @discussion
;  *     Create a new user record with the authentication authority
;  *     The buffer is packed as follows:
;  *
;  *     4 byte length of authenticator's UserID,
;  *     authenticator's UserID in UTF8 encoding,
;  *     4 byte length of authenticator's password,
;  *     authenticator's password in UTF8 encoding
;  *     4 byte length of new user's short-name,
;  *     user's short-name,
;  *     4 byte length of new user's password,
;  *     user's password
;  
(defconstant $kDSStdAuthNewUser "dsAuthMethodStandard:dsAuthNewUser")
; #define		kDSStdAuthNewUser					"dsAuthMethodStandard:dsAuthNewUser"
; !
;  * @defined kDSStdAuthGetPolicy
;  * @discussion The plug-in should determine which specific authentication method to use.
;  *     The buffer is packed as follows:
;  *
;  *     4 byte length of authenticator's UserID,
;  *     authenticator's UserID in UTF8 encoding,
;  *     4 byte length of authenticator's password,
;  *     authenticator's password in UTF8 encoding
;  *     4 byte length of UserID of the account to get policies,
;  *     UserID of the account to get policies in UTF8 encoding
;  *
;  *     The Password Server does not require authentication for this auth method.
;  *       The first two fields are to cover us for future policy changes and to keep the buffer
;  *       format as standardized as possible.
;  
(defconstant $kDSStdAuthGetPolicy "dsAuthMethodStandard:dsAuthGetPolicy")
; #define		kDSStdAuthGetPolicy					"dsAuthMethodStandard:dsAuthGetPolicy"
; !
;  * @defined kDSStdAuthSetPolicy
;  * @discussion The plug-in should determine which specific authentication method to use.
;  *     The buffer is packed as follows:
;  *
;  *     4 byte length of authenticator's UserID,
;  *     authenticator's UserID in UTF8 encoding,
;  *     4 byte length of authenticator's password,
;  *     authenticator's password in UTF8 encoding
;  *     4 byte length of UserID of the account to set policies,
;  *     UserID of the account to set policies in UTF8 encoding
;  *     4 byte length of policy data,
;  *     policy data
;  *
;  
(defconstant $kDSStdAuthSetPolicy "dsAuthMethodStandard:dsAuthSetPolicy")
; #define		kDSStdAuthSetPolicy					"dsAuthMethodStandard:dsAuthSetPolicy"
(defconstant $kDSStdAuthGetGlobalPolicy "dsAuthMethodStandard:dsAuthGetGlobalPolicy")
; #define		kDSStdAuthGetGlobalPolicy			"dsAuthMethodStandard:dsAuthGetGlobalPolicy"
(defconstant $kDSStdAuthSetGlobalPolicy "dsAuthMethodStandard:dsAuthSetGlobalPolicy")
; #define		kDSStdAuthSetGlobalPolicy			"dsAuthMethodStandard:dsAuthSetGlobalPolicy"
(defconstant $kDSStdAuthGetUserName "dsAuthMethodStandard:dsAuthGetUserName")
; #define		kDSStdAuthGetUserName				"dsAuthMethodStandard:dsAuthGetUserName"
(defconstant $kDSStdAuthSetUserName "dsAuthMethodStandard:dsAuthSetUserName")
; #define		kDSStdAuthSetUserName				"dsAuthMethodStandard:dsAuthSetUserName"
(defconstant $kDSStdAuthGetUserData "dsAuthMethodStandard:dsAuthGetUserData")
; #define		kDSStdAuthGetUserData				"dsAuthMethodStandard:dsAuthGetUserData"
(defconstant $kDSStdAuthSetUserData "dsAuthMethodStandard:dsAuthSetUserData")
; #define		kDSStdAuthSetUserData				"dsAuthMethodStandard:dsAuthSetUserData"
(defconstant $kDSStdAuthDeleteUser "dsAuthMethodStandard:dsAuthDeleteUser")
; #define		kDSStdAuthDeleteUser				"dsAuthMethodStandard:dsAuthDeleteUser"
;  Users distinguished or real name
(defconstant $kDS1AttrDistinguishedName "dsAttrTypeStandard:RealName")
; #define		kDS1AttrDistinguishedName		"dsAttrTypeStandard:RealName"
(defconstant $kDS1AttrFirstName "dsAttrTypeStandard:FirstName")
; #define		kDS1AttrFirstName				"dsAttrTypeStandard:FirstName"
(defconstant $kDS1AttrMiddleName "dsAttrTypeStandard:MiddleName")
; #define		kDS1AttrMiddleName				"dsAttrTypeStandard:MiddleName"
(defconstant $kDS1AttrLastName "dsAttrTypeStandard:LastName")
; #define		kDS1AttrLastName				"dsAttrTypeStandard:LastName"
;  All possible names for a record
(defconstant $kDSNAttrAllNames "dsAttrTypeStandard:AllNames")
; #define		kDSNAttrAllNames				"dsAttrTypeStandard:AllNames"
;  set password methods
(defconstant $kDSSetPasswdBestOf "dsSetPasswdBestOf")
; #define		kDSSetPasswdBestOf				"dsSetPasswdBestOf"
; !
;  * @defined kDSNAttrAuthenticationAuthority
;  * @discussion Determines what mechanism is used to verify or set a user's password.
;  *     If multiple values are present, the first attributes returned take precedence.
;  *     Typically found in User records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrAuthenticationAuthority "dsAttrTypeStandard:AuthenticationAuthority")
; #define		kDSNAttrAuthenticationAuthority	"dsAttrTypeStandard:AuthenticationAuthority"
; !
;  * @defined kDS1AttrPasswordPolicyOptions
;  * @discussion Collection of password policy options in single attribute.
;  * Used in user presets record.
;  
(defconstant $kDS1AttrPasswordPolicyOptions "dsAttrTypeStandard:PasswordPolicyOptions")
; #define		kDS1AttrPasswordPolicyOptions	"dsAttrTypeStandard:PasswordPolicyOptions"
; !
;  * @defined kDSValueAuthAuthorityDefault
;  * @discussion The default value to use for the kDSNAttrAuthenticationAuthority attribute.
;  *     When creating a user record, set this value for authentication authority before
;  *     setting the password with dsDoDirNodeAuth.
;  
; #define		kDSValueAuthAuthorityDefault				kDSValueAuthAuthorityBasic
; #define		kDSValueAuthAuthorityDefault				kDSValueAuthAuthorityShadowHash
(defconstant $kDSValueAuthAuthorityBasic ";basic;")
; #define		kDSValueAuthAuthorityBasic					";basic;"
(defconstant $kDSTagAuthAuthorityBasic "basic")
; #define		kDSTagAuthAuthorityBasic					"basic"
(defconstant $kDSValueAuthAuthorityLocalWindowsHash ";LocalWindowsHash;")
; #define		kDSValueAuthAuthorityLocalWindowsHash		";LocalWindowsHash;"
(defconstant $kDSTagAuthAuthorityLocalWindowsHash "LocalWindowsHash")
; #define		kDSTagAuthAuthorityLocalWindowsHash			"LocalWindowsHash"
(defconstant $kDSValueAuthAuthorityShadowHash ";ShadowHash;")
; #define		kDSValueAuthAuthorityShadowHash				";ShadowHash;"
(defconstant $kDSTagAuthAuthorityShadowHash "ShadowHash")
; #define		kDSTagAuthAuthorityShadowHash				"ShadowHash"
(defconstant $kDSTagAuthAuthorityBetterHashOnly "BetterHashOnly")
; #define		kDSTagAuthAuthorityBetterHashOnly			"BetterHashOnly"
(defconstant $kDSValueAuthAuthorityPasswordServerPrefix ";ApplePasswordServer;")
; #define		kDSValueAuthAuthorityPasswordServerPrefix	";ApplePasswordServer;"
(defconstant $kDSTagAuthAuthorityPasswordServer "ApplePasswordServer")
; #define		kDSTagAuthAuthorityPasswordServer			"ApplePasswordServer"
(defconstant $kDSValueAuthAuthorityKerberosv5 ";Kerberosv5;")
; #define		kDSValueAuthAuthorityKerberosv5				";Kerberosv5;"
(defconstant $kDSTagAuthAuthorityKerberosv5 "Kerberosv5")
; #define		kDSTagAuthAuthorityKerberosv5				"Kerberosv5"
(defconstant $kDSValueAuthAuthorityLocalCachedUser ";LocalCachedUser;")
; #define		kDSValueAuthAuthorityLocalCachedUser		";LocalCachedUser;"
(defconstant $kDSTagAuthAuthorityLocalCachedUser "LocalCachedUser")
; #define		kDSTagAuthAuthorityLocalCachedUser			"LocalCachedUser"
(defconstant $kDSValueAuthAuthorityDisabledUser ";DisabledUser;")
; #define		kDSValueAuthAuthorityDisabledUser			";DisabledUser;"
(defconstant $kDSTagAuthAuthorityDisabledUser "DisabledUser")
; #define		kDSTagAuthAuthorityDisabledUser				"DisabledUser"
; 	Single Valued Attribute
(defconstant $kDS1AttrPassword "dsAttrTypeStandard:Password")
; #define		kDS1AttrPassword				"dsAttrTypeStandard:Password"
(defconstant $kDS1AttrPasswordPlus "dsAttrTypeStandard:PasswordPlus")
; #define		kDS1AttrPasswordPlus			"dsAttrTypeStandard:PasswordPlus"
(defconstant $kDS1AttrAuthenticationHint "dsAttrTypeStandard:AuthenticationHint")
; #define		kDS1AttrAuthenticationHint 		"dsAttrTypeStandard:AuthenticationHint"
(defconstant $kDS1AttrInternetAlias "dsAttrTypeStandard:InetAlias")
; #define		kDS1AttrInternetAlias  			"dsAttrTypeStandard:InetAlias"
(defconstant $kDS1AttrNFSHomeDirectory "dsAttrTypeStandard:NFSHomeDirectory")
; #define		kDS1AttrNFSHomeDirectory		"dsAttrTypeStandard:NFSHomeDirectory"
(defconstant $kDS1AttrUniqueID "dsAttrTypeStandard:UniqueID")
; #define		kDS1AttrUniqueID				"dsAttrTypeStandard:UniqueID"
(defconstant $kDS1AttrPrimaryGroupID "dsAttrTypeStandard:PrimaryGroupID")
; #define		kDS1AttrPrimaryGroupID			"dsAttrTypeStandard:PrimaryGroupID"
(defconstant $kDS1AttrMailAttribute "dsAttrTypeStandard:MailAttribute")
; #define		kDS1AttrMailAttribute			"dsAttrTypeStandard:MailAttribute"
(defconstant $kDS1AttrComment "dsAttrTypeStandard:Comment")
; #define		kDS1AttrComment					"dsAttrTypeStandard:Comment"
(defconstant $kDS1AttrRARA "dsAttrTypeStandard:RARA")
; #define		kDS1AttrRARA					"dsAttrTypeStandard:RARA"
(defconstant $kDS1AttrGeneratedUID "dsAttrTypeStandard:GeneratedUID")
; #define		kDS1AttrGeneratedUID			"dsAttrTypeStandard:GeneratedUID"
(defconstant $kDS1AttrAdminStatus "dsAttrTypeStandard:AdminStatus")
; #define		kDS1AttrAdminStatus				"dsAttrTypeStandard:AdminStatus"
(defconstant $kDS1AttrPwdAgingPolicy "dsAttrTypeStandard:PwdAgingPolicy")
; #define		kDS1AttrPwdAgingPolicy			"dsAttrTypeStandard:PwdAgingPolicy"
(defconstant $kDS1AttrUserShell "dsAttrTypeStandard:UserShell")
; #define		kDS1AttrUserShell				"dsAttrTypeStandard:UserShell"
(defconstant $kDS1AttrVFSType "dsAttrTypeStandard:VFSType")
; #define		kDS1AttrVFSType					"dsAttrTypeStandard:VFSType"
(defconstant $kDS1AttrVFSPassNo "dsAttrTypeStandard:VFSPassNo")
; #define		kDS1AttrVFSPassNo				"dsAttrTypeStandard:VFSPassNo"
(defconstant $kDS1AttrVFSDumpFreq "dsAttrTypeStandard:VFSDumpFreq")
; #define		kDS1AttrVFSDumpFreq				"dsAttrTypeStandard:VFSDumpFreq"
(defconstant $kDS1AttrVFSLinkDir "dsAttrTypeStandard:VFSLinkDir")
; #define		kDS1AttrVFSLinkDir				"dsAttrTypeStandard:VFSLinkDir"
(defconstant $kDS1AttrChange "dsAttrTypeStandard:Change")
; #define		kDS1AttrChange					"dsAttrTypeStandard:Change"
(defconstant $kDS1AttrExpire "dsAttrTypeStandard:Expire")
; #define		kDS1AttrExpire					"dsAttrTypeStandard:Expire"
(defconstant $kDS1AttrRealUserID "dsAttrTypeStandard:RealUserID")
; #define		kDS1AttrRealUserID				"dsAttrTypeStandard:RealUserID"
(defconstant $kDSNAttrRecordAlias "dsAttrTypeStandard:RecordAlias")
; #define		kDSNAttrRecordAlias				"dsAttrTypeStandard:RecordAlias"
(defconstant $kDSNAttrGroupMembership "dsAttrTypeStandard:GroupMembership")
; #define		kDSNAttrGroupMembership			"dsAttrTypeStandard:GroupMembership"
(defconstant $kDSNAttrHomeDirectory "dsAttrTypeStandard:HomeDirectory")
; #define		kDSNAttrHomeDirectory			"dsAttrTypeStandard:HomeDirectory"
; !
;  *	@defined kDS1AttrXMLPlist
;  *	@discussion SA config settings plist.
;  
(defconstant $kDS1AttrXMLPlist "dsAttrTypeStandard:XMLPlist")
; #define		kDS1AttrXMLPlist				"dsAttrTypeStandard:XMLPlist"
; !
;  *	@defined kDSNAttrKeywords
;  *	@discussion Keywords using for searching capability.
;  
(defconstant $kDSNAttrKeywords "dsAttrTypeStandard:Keywords")
; #define		kDSNAttrKeywords				"dsAttrTypeStandard:Keywords"
; !
;  *	@defined kDS1AttrHomeDirectoryQuota
;  *	@discussion Represents the allowed usage for a user's home directory in bytes.
;  *		Found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDS1AttrHomeDirectoryQuota "dsAttrTypeStandard:HomeDirectoryQuota")
; #define		kDS1AttrHomeDirectoryQuota		"dsAttrTypeStandard:HomeDirectoryQuota"
(defconstant $kDS1AttrHomeDirectorySoftQuota "dsAttrTypeStandard:HomeDirectorySoftQuota")
; #define		kDS1AttrHomeDirectorySoftQuota	"dsAttrTypeStandard:HomeDirectorySoftQuota"
; !
;  *	@defined kDS1AttrAdminLimits
;  *	@discussion XML plist indicating what an admin user can edit.
;  *		Found in kDSStdRecordTypeUsers records.
;  
(defconstant $kDS1AttrAdminLimits "dsAttrTypeStandard:AdminLimits")
; #define		kDS1AttrAdminLimits				"dsAttrTypeStandard:AdminLimits"
; !
;  *	@defined kDS1AttrPresetUserIsAdmin
;  *	@discussion Flag to indicate whether users created from this preset are administrators
;  *		by default. Found in kDSStdRecordTypePresetUsers records.
;  
(defconstant $kDS1AttrPresetUserIsAdmin "dsAttrTypeStandard:PresetUserIsAdmin")
; #define		kDS1AttrPresetUserIsAdmin		"dsAttrTypeStandard:PresetUserIsAdmin"
; #define		kDS1StandardAttrHomeLocOwner	kDS1AttrHomeLocOwner
; !
;  *	@defined kDS1AttrHomeLocOwner
;  *	@discussion Represents the owner of a workgroup's shared home directory.
;  *		Typically found in kDSStdRecordTypeGroups records.
;  
(defconstant $kDS1AttrHomeLocOwner "dsAttrTypeStandard:HomeLocOwner")
; #define		kDS1AttrHomeLocOwner			"dsAttrTypeStandard:HomeLocOwner"
(defconstant $kDSNAttrProtocols "dsAttrTypeStandard:Protocols")
; #define		kDSNAttrProtocols				"dsAttrTypeStandard:Protocols"
(defconstant $kDSNAttrVFSOpts "dsAttrTypeStandard:VFSOpts")
; #define		kDSNAttrVFSOpts					"dsAttrTypeStandard:VFSOpts"
; !
;  *	@defined kDS1AttrPasswordServerLocation
;  *	@discussion Specifies the IP address or domain name of the Password Server associated
;  *		with a given directory node. Found in a config record named PasswordServer.
;  
(defconstant $kDS1AttrPasswordServerLocation "dsAttrTypeStandard:PasswordServerLocation")
; #define		kDS1AttrPasswordServerLocation	"dsAttrTypeStandard:PasswordServerLocation"
; !
;  * @defined kDS1AttrPort
;  * @discussion Represents the port number a service is available on.
;  *     Typically found in service record types including kDSStdRecordTypeAFPServer,
;  *     kDSStdRecordTypeLDAPServer, and kDSStdRecordTypeWebServer.
;  
(defconstant $kDS1AttrPort "dsAttrTypeStandard:Port")
; #define		kDS1AttrPort					"dsAttrTypeStandard:Port"
; !
;  * @defined kDS1AttrLocation
;  * @discussion Represents the location a service is available from (usually domain name).
;  *     Typically found in service record types including kDSStdRecordTypeAFPServer,
;  *     kDSStdRecordTypeLDAPServer, and kDSStdRecordTypeWebServer.
;  
(defconstant $kDS1AttrLocation "dsAttrTypeStandard:Location")
; #define		kDS1AttrLocation				"dsAttrTypeStandard:Location"
; !
;  * @defined kDS1AttrServiceType
;  * @discussion Represents the service type for the service.  This is the raw service type of the
;  *     service.  For example a service record type of kDSStdRecordTypeWebServer 
;  *     might have a service type of "http" or "https".
;  
(defconstant $kDS1AttrServiceType "dsAttrTypeStandard:ServiceType")
; #define		kDS1AttrServiceType				"dsAttrTypeStandard:ServiceType"
; !
;  * @defined kDS1AttrPicture
;  * @discussion Represents the path of the picture for each user displayed in the login window.
;  * Found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDS1AttrPicture "dsAttrTypeStandard:Picture")
; #define		kDS1AttrPicture					"dsAttrTypeStandard:Picture"
;  Mutivalued meta attribute data
(defconstant $kDSNAttrMetaNodeLocation "dsAttrTypeStandard:AppleMetaNodeLocation")
; #define		kDSNAttrMetaNodeLocation		"dsAttrTypeStandard:AppleMetaNodeLocation"
(defconstant $kStandardTargetAlias "dsAttrTypeStandard:AppleMetaAliasTarget")
; #define		kStandardTargetAlias			"dsAttrTypeStandard:AppleMetaAliasTarget"
(defconstant $kStandardSourceAlias "dsAttrTypeStandard:AppleMetaAliasSource")
; #define		kStandardSourceAlias			"dsAttrTypeStandard:AppleMetaAliasSource"
(defconstant $kDS1AttrAliasData "dsAttrTypeStandard:AppleAliasData")
; #define		kDS1AttrAliasData				"dsAttrTypeStandard:AppleAliasData"
; 	Single Valued - checksum/meta data
(defconstant $kDS1AttrDataStamp "dsAttrTypeStandard:DataStamp")
; #define		kDS1AttrDataStamp				"dsAttrTypeStandard:DataStamp"
(defconstant $kDS1AttrTotalSize "dsAttrTypeStandard:TotalSize")
; #define		kDS1AttrTotalSize				"dsAttrTypeStandard:TotalSize"
; 	Single Valued - data of Create, Modify, Backup time in UTC
(defconstant $kDS1AttrTimePackage "dsAttrTypeStandard:TimePackage")
; #define		kDS1AttrTimePackage				"dsAttrTypeStandard:TimePackage"
;   Single Valued - alias attribute, contain pointer to another node/record/attribute
(defconstant $kDS1AttrAlias "dsAttrTypeStandard:Alias")
; #define		kDS1AttrAlias					"dsAttrTypeStandard:Alias"
; 	Single valued - used to get a "auth" credential, to be used to authenticate
; 		to other Directory nodes.
(defconstant $kDS1AttrAuthCredential "dsAttrTypeStandard:AuthCredential")
; #define		kDS1AttrAuthCredential			"dsAttrTypeStandard:AuthCredential"
; !
;  * @defined kDS1AttrNote
;  * @discussion Note attribute. Commonly used in printer records.
;  
(defconstant $kDS1AttrNote "dsAttrTypeStandard:Note")
; #define		kDS1AttrNote					"dsAttrTypeStandard:Note"
; !
;  * @defined kDS1AttrDNSDomain
;  * @discussion DNS Resolver domain attribute.
;  
(defconstant $kDS1AttrDNSDomain "dsAttrTypeStandard:DNSDomain")
; #define		kDS1AttrDNSDomain			"dsAttrTypeStandard:DNSDomain"
; !
;  * @defined kDS1AttrDNSNameServer
;  * @discussion DNS Resolver nameserver attribute.
;  
(defconstant $kDS1AttrDNSNameServer "dsAttrTypeStandard:DNSNameServer")
; #define		kDS1AttrDNSNameServer			"dsAttrTypeStandard:DNSNameServer"
; !
;  * @defined kDSNAttrKDCAuthKey
;  * @discussion KDC master key RSA encrypted with realm public key.
;  
(defconstant $kDSNAttrKDCAuthKey "dsAttrTypeStandard:KDCAuthKey")
; #define		kDSNAttrKDCAuthKey				"dsAttrTypeStandard:KDCAuthKey"
; !
;  * @defined kDS1AttrKDCConfigData
;  * @discussion Contents of the kdc.conf file.
;  
(defconstant $kDS1AttrKDCConfigData "dsAttrTypeStandard:KDCConfigData")
; #define		kDS1AttrKDCConfigData			"dsAttrTypeStandard:KDCConfigData"
; 	used with directory nodes so that clients can "discover" the
; 	API capabilities for this Directory Node.
(defconstant $kDS1AttrCapabilities "dsAttrTypeStandard:Capabilities")
; #define		kDS1AttrCapabilities		"dsAttrTypeStandard:Capabilities"
;  can be found using dsGetDirNodeInfo and will return one of
;  ReadOnly, ReadWrite, or WriteOnly strings
;  note that ReadWrite does not imply fully readable or writable
(defconstant $kDS1AttrReadOnlyNode "dsAttrTypeStandard:ReadOnlyNode")
; #define		kDS1AttrReadOnlyNode		"dsAttrTypeStandard:ReadOnlyNode"
; 	used with Search Node to  "discover" the search path for this node
(defconstant $kDS1AttrSearchPath "dsAttrTypeStandard:SearchPath")
; #define		kDS1AttrSearchPath			"dsAttrTypeStandard:SearchPath"
(defconstant $kDSNAttrSearchPath "dsAttrTypeStandard:SearchPath")
; #define		kDSNAttrSearchPath			"dsAttrTypeStandard:SearchPath"
; 	used with Search Node to "discover" the search policy for this node
(defconstant $kDS1AttrSearchPolicy "dsAttrTypeStandard:SearchPolicy")
; #define		kDS1AttrSearchPolicy			"dsAttrTypeStandard:SearchPolicy"
; 	used with Search Node to "discover" the possible search paths for this node
(defconstant $kDS1AttrNSPSearchPath "dsAttrTypeStandard:NSPSearchPath")
; #define		kDS1AttrNSPSearchPath			"dsAttrTypeStandard:NSPSearchPath"
(defconstant $kDSNAttrNSPSearchPath "dsAttrTypeStandard:NSPSearchPath")
; #define		kDSNAttrNSPSearchPath			"dsAttrTypeStandard:NSPSearchPath"
(defconstant $kDS1AttrLSPSearchPath "dsAttrTypeStandard:LSPSearchPath")
; #define		kDS1AttrLSPSearchPath			"dsAttrTypeStandard:LSPSearchPath"
(defconstant $kDSNAttrLSPSearchPath "dsAttrTypeStandard:LSPSearchPath")
; #define		kDSNAttrLSPSearchPath			"dsAttrTypeStandard:LSPSearchPath"
(defconstant $kDS1AttrCSPSearchPath "dsAttrTypeStandard:CSPSearchPath")
; #define		kDS1AttrCSPSearchPath			"dsAttrTypeStandard:CSPSearchPath"
(defconstant $kDSNAttrCSPSearchPath "dsAttrTypeStandard:CSPSearchPath")
; #define		kDSNAttrCSPSearchPath			"dsAttrTypeStandard:CSPSearchPath"
; 	force the directory service to generate a binary image of the
; 	record and all it's attributes.
(defconstant $kDS1AttrRecordImage "dsAttrTypeStandard:RecordImage")
; #define		kDS1AttrRecordImage			"dsAttrTypeStandard:RecordImage"
; 	Information (version, signature, about, credits..ect.) about the plug-in that
; 	is actually servicing a particular directory node.
(defconstant $kDSNAttrPlugInInfo "dsAttrTypeStandard:PlugInInfo")
; #define		kDSNAttrPlugInInfo			"dsAttrTypeStandard:PlugInInfo"
; 	Multivalued Attribute, list of names/keys for this record
(defconstant $kDSNAttrRecordName "dsAttrTypeStandard:RecordName")
; #define		kDSNAttrRecordName			"dsAttrTypeStandard:RecordName"
; 	Multivalued - list of attribute types
(defconstant $kDSNAttrSchema "dsAttrTypeStandard:Scheama")
; #define		kDSNAttrSchema				"dsAttrTypeStandard:Scheama"
; 	Single Valued for a Record, Multi-valued for a Directory Node
(defconstant $kDSNAttrRecordType "dsAttrTypeStandard:RecordType")
; #define		kDSNAttrRecordType			"dsAttrTypeStandard:RecordType"
(defconstant $kDSNAttrNodePath "dsAttrTypeStandard:NodePath")
; #define		kDSNAttrNodePath			"dsAttrTypeStandard:NodePath"
(defconstant $kDSNAttrAuthMethod "dsAttrTypeStandard:AuthMethod")
; #define		kDSNAttrAuthMethod			"dsAttrTypeStandard:AuthMethod"
(defconstant $kDSNAttrSetPasswdMethod "dsAttrTypeStandard:SetPasswdMethod")
; #define		kDSNAttrSetPasswdMethod		"dsAttrTypeStandard:SetPasswdMethod"
; 	Multivalued - list of group records
(defconstant $kDSNAttrGroup "dsAttrTypeStandard:Group")
; #define		kDSNAttrGroup				"dsAttrTypeStandard:Group"
; 	Multivalued - list of member records
(defconstant $kDSNAttrMember "dsAttrTypeStandard:Member")
; #define		kDSNAttrMember				"dsAttrTypeStandard:Member"
(defconstant $kDSNAttrURL "dsAttrTypeStandard:URL")
; #define		kDSNAttrURL					"dsAttrTypeStandard:URL"
; 	data contained in this attribute type is a fully qualified MIME Type.
(defconstant $kDSNAttrMIME "dsAttrTypeStandard:MIME")
; #define		kDSNAttrMIME				"dsAttrTypeStandard:MIME"
(defconstant $kDSNAttrHTML "dsAttrTypeStandard:HTML")
; #define		kDSNAttrHTML				"dsAttrTypeStandard:HTML"
(defconstant $kDSNAttrNBPEntry "dsAttrTypeStandard:NBPEntry")
; #define		kDSNAttrNBPEntry			"dsAttrTypeStandard:NBPEntry"
(defconstant $kDSNAttrDNSName "dsAttrTypeStandard:DNSName")
; #define		kDSNAttrDNSName				"dsAttrTypeStandard:DNSName"
(defconstant $kDSNAttrIPAddress "dsAttrTypeStandard:IPAddress")
; #define		kDSNAttrIPAddress			"dsAttrTypeStandard:IPAddress"
; !
;  * @defined kDS1AttrENetAddress
;  * @discussion Single-valued attribute for hardware Ethernet address (MAC address).
;  *		Found in machine records (kDSStdRecordTypeMachines) and computer records
;  *		(kDSStdRecordTypeComputers).
;  
(defconstant $kDS1AttrENetAddress "dsAttrTypeStandard:ENetAddress")
; #define		kDS1AttrENetAddress			"dsAttrTypeStandard:ENetAddress"
; !
;  * @defined kDSNAttrBootParams
;  * @discussion Attribute type in host or machine records for storing boot params.
;  
(defconstant $kDSNAttrBootParams "dsAttrTypeStandard:BootParams")
; #define		kDSNAttrBootParams			"dsAttrTypeStandard:BootParams"
; !
;  * @defined kDSNAttrNetGroups
;  * @discussion Attribute type that indicates which netgroups its record is a member of.
;  *		Found in user, host, and netdomain records.
;  
(defconstant $kDSNAttrNetGroups "dsAttrTypeStandard:NetGroups")
; #define		kDSNAttrNetGroups			"dsAttrTypeStandard:NetGroups"
(defconstant $kDSNAttrPGPPublicKey "dsAttrTypeStandard:PGPPublicKey")
; #define		kDSNAttrPGPPublicKey		"dsAttrTypeStandard:PGPPublicKey"
(defconstant $kDSNAttrEMailAddress "dsAttrTypeStandard:EMailAddress")
; #define		kDSNAttrEMailAddress		"dsAttrTypeStandard:EMailAddress"
(defconstant $kDSNAttrAreaCode "dsAttrTypeStandard:AreaCode")
; #define		kDSNAttrAreaCode			"dsAttrTypeStandard:AreaCode"
(defconstant $kDSNAttrPhoneNumber "dsAttrTypeStandard:PhoneNumber")
; #define		kDSNAttrPhoneNumber			"dsAttrTypeStandard:PhoneNumber"
(defconstant $kDSNAttrPostalAddress "dsAttrTypeStandard:PostalAddress")
; #define		kDSNAttrPostalAddress		"dsAttrTypeStandard:PostalAddress"
(defconstant $kDSNAttrOrganizationName "dsAttrTypeStandard:OrganizationName")
; #define		kDSNAttrOrganizationName	"dsAttrTypeStandard:OrganizationName"
(defconstant $kDSNAttrAddressLine1 "dsAttrTypeStandard:AddressLine1")
; #define		kDSNAttrAddressLine1		"dsAttrTypeStandard:AddressLine1"
(defconstant $kDSNAttrAddressLine2 "dsAttrTypeStandard:AddressLine2")
; #define		kDSNAttrAddressLine2		"dsAttrTypeStandard:AddressLine2"
(defconstant $kDSNAttrAddressLine3 "dsAttrTypeStandard:AddressLine3")
; #define		kDSNAttrAddressLine3		"dsAttrTypeStandard:AddressLine3"
(defconstant $kDSNAttrCity "dsAttrTypeStandard:City")
; #define		kDSNAttrCity				"dsAttrTypeStandard:City"
(defconstant $kDSNAttrState "dsAttrTypeStandard:State")
; #define		kDSNAttrState				"dsAttrTypeStandard:State"
(defconstant $kDSNAttrPostalCode "dsAttrTypeStandard:PostalCode")
; #define		kDSNAttrPostalCode			"dsAttrTypeStandard:PostalCode"
; !
;  * @defined kDSNAttrFaxNumber
;  * @discussion Represents the FAX numbers of a user or group.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrFaxNumber "dsAttrTypeStandard:FAXNumber")
; #define		kDSNAttrFaxNumber					"dsAttrTypeStandard:FAXNumber"
; !
;  * @defined kDSNAttrMobileNumber
;  * @discussion Represents the mobile numbers of a user or group.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrMobileNumber "dsAttrTypeStandard:MobileNumber")
; #define		kDSNAttrMobileNumber					"dsAttrTypeStandard:MobileNumber"
; !
;  * @defined kDSNAttrPagerNumber
;  * @discussion Represents the pager numbers of a user or group.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrPagerNumber "dsAttrTypeStandard:PagerNumber")
; #define		kDSNAttrPagerNumber					"dsAttrTypeStandard:PagerNumber"
; !
;  * @defined kDSNAttrStreet
;  * @discussion Represents the street address of a user or group.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrStreet "dsAttrTypeStandard:Street")
; #define		kDSNAttrStreet					"dsAttrTypeStandard:Street"
; !
;  * @defined kDSNAttrDepartment
;  * @discussion Represents the department name of a user or group.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrDepartment "dsAttrTypeStandard:Department")
; #define		kDSNAttrDepartment					"dsAttrTypeStandard:Department"
; !
;  * @defined kDSNAttrNickName
;  * @discussion Represents the nickname of a user or group.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrNickName "dsAttrTypeStandard:NickName")
; #define		kDSNAttrNickName					"dsAttrTypeStandard:NickName"
; !
;  * @defined kDSNAttrJobTitle
;  * @discussion Represents the job title of a user.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrJobTitle "dsAttrTypeStandard:JobTitle")
; #define		kDSNAttrJobTitle					"dsAttrTypeStandard:JobTitle"
; !
;  * @defined kDSNAttrIMHandle
;  * @discussion Represents the Instant Messaging handles of a user.
;  * Values should be prefixed with the appropriate IM type
;  * ie. AIM:, Jabber:, MSN:, Yahoo:, or ICQ:
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrIMHandle "dsAttrTypeStandard:IMHandle")
; #define		kDSNAttrIMHandle					"dsAttrTypeStandard:IMHandle"
; !
;  * @defined kDSNAttrBuilding
;  * @discussion Represents the building name for a user or group.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrBuilding "dsAttrTypeStandard:Building")
; #define		kDSNAttrBuilding					"dsAttrTypeStandard:Building"
; !
;  * @defined kDSNAttrCountry
;  * @discussion Represents country of a record entry.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrCountry "dsAttrTypeStandard:Country")
; #define		kDSNAttrCountry						"dsAttrTypeStandard:Country"
; !
;  * @defined kDSNAttrNamePrefix
;  * @discussion Represents the title prefix of a user.
;  * ie. Mr., Ms., Mrs., Dr., etc.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrNamePrefix "dsAttrTypeStandard:NamePrefix")
; #define		kDSNAttrNamePrefix					"dsAttrTypeStandard:NamePrefix"
; !
;  * @defined kDSNAttrNameSuffix
;  * @discussion Represents the name suffix of a user.
;  * ie. Jr., Sr., etc.
;  * Usually found in user records (kDSStdRecordTypeUsers).
;  
(defconstant $kDSNAttrNameSuffix "dsAttrTypeStandard:NameSuffix")
; #define		kDSNAttrNameSuffix					"dsAttrTypeStandard:NameSuffix"
;  used for Setup Assistant automatic population
(defconstant $kDS1AttrSetupOccupation "dsAttrTypeStandard:Occupation")
; #define		kDS1AttrSetupOccupation		"dsAttrTypeStandard:Occupation"
(defconstant $kDS1AttrSetupLocation "dsAttrTypeStandard:SetupAssistantLocation")
; #define		kDS1AttrSetupLocation		"dsAttrTypeStandard:SetupAssistantLocation"
(defconstant $kDS1AttrSetupAdvertising "dsAttrTypeStandard:SetupAssistantAdvertising")
; #define		kDS1AttrSetupAdvertising	"dsAttrTypeStandard:SetupAssistantAdvertising"
(defconstant $kDS1AttrSetupAutoRegister "dsAttrTypeStandard:SetupAssistantAutoRegister")
; #define		kDS1AttrSetupAutoRegister	"dsAttrTypeStandard:SetupAssistantAutoRegister"
(defconstant $kDS1AttrMCXSettings "dsAttrTypeStandard:MCXSettings")
; #define		kDS1AttrMCXSettings			"dsAttrTypeStandard:MCXSettings"
(defconstant $kDSNAttrMCXSettings "dsAttrTypeStandard:MCXSettings")
; #define		kDSNAttrMCXSettings			"dsAttrTypeStandard:MCXSettings"
(defconstant $kDS1AttrMCXFlags "dsAttrTypeStandard:MCXFlags")
; #define		kDS1AttrMCXFlags			"dsAttrTypeStandard:MCXFlags"
(defconstant $kDSNAttrComputers "dsAttrTypeStandard:Computers")
; #define		kDSNAttrComputers			"dsAttrTypeStandard:Computers"
; Caching
(defconstant $kDS1AttrCopyTimestamp "dsAttrTypeStandard:CopyTimestamp")
; #define		kDS1AttrCopyTimestamp				"dsAttrTypeStandard:CopyTimestamp"
(defconstant $kDS1AttrOriginalNodeName "dsAttrTypeStandard:OriginalNodeName")
; #define		kDS1AttrOriginalNodeName			"dsAttrTypeStandard:OriginalNodeName"
(defconstant $kDS1AttrOriginalNFSHomeDirectory "dsAttrTypeStandard:OriginalNFSHomeDirectory")
; #define		kDS1AttrOriginalNFSHomeDirectory	"dsAttrTypeStandard:OriginalNFSHomeDirectory"
(defconstant $kDSNAttrOriginalHomeDirectory "dsAttrTypeStandard:OriginalHomeDirectory")
; #define		kDSNAttrOriginalHomeDirectory		"dsAttrTypeStandard:OriginalHomeDirectory"
;  NSL
(defconstant $kDSNAttrURLForNSL "dsAttrTypeStandard:URLForNSL")
; #define		kDSNAttrURLForNSL			"dsAttrTypeStandard:URLForNSL"
;  Print
(defconstant $kDS1AttrPrintServiceInfoXML "dsAttrTypeStandard:PrintServiceInfoXML")
; #define		kDS1AttrPrintServiceInfoXML		"dsAttrTypeStandard:PrintServiceInfoXML"
(defconstant $kDS1AttrPrintServiceInfoText "dsAttrTypeStandard:PrintServiceInfoText")
; #define		kDS1AttrPrintServiceInfoText	"dsAttrTypeStandard:PrintServiceInfoText"
;  Standard attrribute types for kDSStdRecordTypePrinters
(defconstant $kDS1AttrPrinterLPRHost "dsAttrTypeStandard:PrinterLPRHost")
; #define		kDS1AttrPrinterLPRHost			"dsAttrTypeStandard:PrinterLPRHost"
(defconstant $kDS1AttrPrinterLPRQueue "dsAttrTypeStandard:PrinterLPRQueue")
; #define		kDS1AttrPrinterLPRQueue			"dsAttrTypeStandard:PrinterLPRQueue"
(defconstant $kDS1AttrPrinterType "dsAttrTypeStandard:PrinterType")
; #define		kDS1AttrPrinterType				"dsAttrTypeStandard:PrinterType"
; !
; * @defined kDS1AttrPrinterMakeAndModel
;  * @discussion Single-valued attribute for definition of the Printer Make and Model.  An example
;  *              Value would be "HP LaserJet 2200".  This would be used to determine the proper PPD
;  *              file to be used when configuring a printer from the Directory.  This attribute
;  *              is based on the IPP Printing Specification RFC and IETF IPP-LDAP Printer Record.
;  
(defconstant $kDS1AttrPrinterMakeAndModel "dsAttrTypeStandard:PrinterMakeAndModel")
; #define         kDS1AttrPrinterMakeAndModel             "dsAttrTypeStandard:PrinterMakeAndModel"
; !
; * @defined kDS1AttrPrinterURI
;  * @discussion Single-valued attribute that defines the URI of a printer "ipp://address" or
;  *              "smb://server/queue".  This is used when configuring a printer. This attribute
;  *				is based on the IPP Printing Specification RFC and IETF IPP-LDAP Printer Record.
;  
(defconstant $kDS1AttrPrinterURI "dsAttrTypeStandard:PrinterURI")
; #define         kDS1AttrPrinterURI                      "dsAttrTypeStandard:PrinterURI"
; !
; * @defined kDS1AttrPrinterXRISupported
;  * @discussion Multi-valued attribute that defines additional URIs supported by a printer.
;  *              This is used when configuring a printer. This attribute is based on the IPP 
;  *				Printing Specification RFC and IETF IPP-LDAP Printer Record.
;  
(defconstant $kDSNAttrPrinterXRISupported "dsAttrTypeStandard:PrinterXRISupported")
; #define         kDSNAttrPrinterXRISupported		"dsAttrTypeStandard:PrinterXRISupported"
; !
; * @defined kDS1AttrPrinter1284DeviceID
;  * @discussion Single-valued attribute that defines the IEEE 1284 DeviceID of a printer.
;  *              This is used when configuring a printer.
;  
(defconstant $kDS1AttrPrinter1284DeviceID "dsAttrTypeStandard:Printer1284DeviceID")
; #define         kDS1AttrPrinter1284DeviceID		"dsAttrTypeStandard:Printer1284DeviceID"
; !
;  * @defined kDS1AttrPrintServiceUserData
;  * @discussion Single-valued attribute for print quota configuration or statistics
;  *		(XML data). Found in user records (kDSStdRecordTypeUsers) or print service
;  *		statistics records (kDSStdRecordTypePrintServiceUser).
;  
(defconstant $kDS1AttrPrintServiceUserData "dsAttrTypeStandard:PrintServiceUserData")
; #define		kDS1AttrPrintServiceUserData	"dsAttrTypeStandard:PrintServiceUserData"
; !
;  * @defined kDSNAttrLDAPReadReplicas
;  * @discussion List of LDAP server URLs which can each be used to read directory data.
;  
(defconstant $kDSNAttrLDAPReadReplicas "dsAttrTypeStandard:LDAPReadReplicas")
; #define		kDSNAttrLDAPReadReplicas		"dsAttrTypeStandard:LDAPReadReplicas"
; !
;  * @defined kDSNAttrLDAPWriteReplicas
;  * @discussion List of LDAP server URLs which can each be used to write directory data.
;  
(defconstant $kDSNAttrLDAPWriteReplicas "dsAttrTypeStandard:LDAPWriteReplicas")
; #define		kDSNAttrLDAPWriteReplicas		"dsAttrTypeStandard:LDAPWriteReplicas"

; #endif


(provide-interface "DirServicesConst")