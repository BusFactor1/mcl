Some of the files in the library folder provide the source code forparts of the distributed MCL image. If you attempt to load or evaluatea definition from one of them, you may get a continuable error similarto the following:? (load "ccl:library;pop-up-menu")> Error: #<standard-class pop-up-menu> is already defined in the CCL kernel.> While executing: set-find-class> Type Command-/ to continue, Command-. to abort.> If continued: Redefine #<standard-class pop-up-menu>.See the Restarts. menu item for further choices.If you wish to redefine all or part of one of these files, you need toset or bind the symbol *warn-if-redefine-kernel* to nil:(let ((*warn-if-redefine-kernel* nil))  (load "ccl:library;pop-up-menu"))The following files are included in the distributed MCL:LIBRARY folder--------------pop-up-menu.lispscroll-bar-dialog-items.lispcolor-dialog-items-os-8-5.lispnav-services.lispscrolling-fred-view.lispINSPECTOR FOLDER subfolder of the LIBRARY folder------------------------------------------------All of the files in this folder are included in the distributed image.Only symbols in the CCL and COMMON-LISP package are marked as beingpart of the kernel, however. So you can freely redefine classes, methods,and functions whose names are in the INSPECTOR package. Reevaluatingthe following definitions will, however, cause the "defined in the CCLkernel" error:In the file "inspector-objects.lisp":  ccl::inspect-system-dataIn the file "inspector-window.lisp":  (method ccl::editing-dialogs-p (inspector::inspector-window))  (method ccl::window-can-do-operation (inspector::inspector-window t))  (method ccl::editing-dialogs-p (inspector::inspector-editor))In the file "new-backtrace.lisp"  (method ccl::editing-dialogs-p (inspector::backtrace-view))  (method ccl::window-can-do-operation (inspector::backtrace-window t))  ccl::select-backtrace  ccl::nth-frame  ccl::names-in-frame  ccl::nth-frame-info  ccl::set-nth-frame-value  ccl::frame-lfun  ccl::top-inspect-formMany of of the other files in the LIBRARY folder are autoloaded asneeded. Hence, it's a good idea to keep the PFSL files for them aroundunless you don't intend to use their functionality:The file "ff.pfsl" is not autoloaded, but it implements the foriegnfunction interface. Evaluate the form (REQUIRE "FF") to load it.The following two files (or their PFSL files) will be loaded the firsttime you enable balloon help. If you are distributing a stand-aloneapplication that uses balloon help, you should load these files beforeyou do SAVE-APPLICATION, with the form (require "HELP-MANAGER") .  help-manager.lisp  resources.lispThe file "lisp-package.lisp" (or its PFSL file) can be loaded by arestart if an attempt is made to read a symbol in the LISP package (notto be confused with the COMMON-LISP package which is part of thedistributed image) before it has been defined. The file will beautoloaded and no error will be signalled if the symbol*AUTOLOAD-LISP-PACKAGE* is true when the reader encounters a symbol inthe LISP package.The file "loop.lisp" (or its PFSL file) is autoloaded whenever a top-levelsymbol is found while macroexpanding an invocation of the LOOP macro.